[
  {
    "objectID": "golem.html",
    "href": "golem.html",
    "title": "The golem framework",
    "section": "",
    "text": "The golem package is an ‘opinionated Shiny framework’ that provides many options for users experienced with creating R packages, but who are looking to streamline their application development."
  },
  {
    "objectID": "golem.html#gap",
    "href": "golem.html#gap",
    "title": "The golem framework",
    "section": "",
    "text": "The golem package is an ‘opinionated Shiny framework’ that provides many options for users experienced with creating R packages, but who are looking to streamline their application development."
  },
  {
    "objectID": "golem.html#start",
    "href": "golem.html#start",
    "title": "The golem framework",
    "section": "Start",
    "text": "Start\nTo create a new golem app from the console, enter the following:\n\ninstall.packages(\"golem\")\nlibrary(golem)\ngolem::create_golem(path = \"gap\")\n\nIf creating a golem app from RStudio’s New Project Wizard, the following defaults are available:\n\n\n\n\n\n\n\nFigure 1: Creating a new golem shiny app\n\n\nThe initial folder structure for a new golem application is below:\n\ngap\n    ├── DESCRIPTION\n    ├── NAMESPACE\n    ├── R\n    │   ├── app_config.R\n    │   ├── app_server.R\n    │   ├── app_ui.R\n    │   └── run_app.R\n    ├── dev\n    │   ├── 01_start.R\n    │   ├── 02_dev.R\n    │   ├── 03_deploy.R\n    │   └── run_dev.R\n    ├── inst\n    │   ├── app\n    │   │   └── www\n    │   │       └── favicon.ico\n    │   └── golem-config.yml\n    ├── man\n    │   └── run_app.Rd\n    ├── gap.Rproj\n    ├── renv\n    │   ├── activate.R\n    │   ├── sandbox\n    │   │   └── R-4.2\n    │   └── settings.dcf\n    └── renv.lock\n\n12 directories, 17 files"
  },
  {
    "objectID": "golem.html#dev-scripts",
    "href": "golem.html#dev-scripts",
    "title": "The golem framework",
    "section": "dev/ scripts",
    "text": "dev/ scripts\nThe dev/ folder contains golem‘s ’guided tour’ scripts and dev/run_dev.R:\nBelow are the scripts to guide you through developing your golem app and the dev/run_dev.R code.\n\ndev/01_start.R opens automatically\n\n\ngap/dev/\n            ├── 01_start.R\n            ├── 02_dev.R\n            ├── 03_deploy.R\n            └── run_dev.R\n\n1 directory, 4 files\n\n\ndev/run_dev.R is for running the ‘development version’ of the application.\n\nIf you are familiar with R package development, you can think of these scripts as a ‘shiny app development checklist.’\n\nDESCRIPTION\nIn the dev/01_start.R script, users build a DESCRIPTION file with golem::fill_desc()\n\nfill_desc() uses the desc package and the sections are entered in a key = \"value\" format\n\n\ngolem::fill_desc(\n  pkg_name = \"gap\",\n  pkg_title = \"An example goelm app\",\n  pkg_description = \"A working example of the golem package.\",\n  author_first_name = \"Martin\",\n  author_last_name = \"Frigaard\",\n  author_email = \"mjfrigaard@pm.me\",\n  repo_url = NULL # The URL of the GitHub Repo (optional)\n)\n\n\nIn dev/02_dev.R, the attachment::att_amend_desc() will “Amend DESCRIPTION with dependencies read from package code parsing”. If attachment is not installed, use install.package('attachment')\n\n\n\nPackage files\ndev/01_start.R contains the usethis functions for for creating common package development files:\n\nLICENSE: usethis::use_mit_license()\nREADME: usethis::use_readme_rmd()\nCode of Conduct: usethis::use_code_of_conduct()\nLifecycle badge: usethis::use_lifecycle_badge(\"Experimental\")\nNEWS.md: usethis::use_news_md(open = FALSE)\nGit: usethis::use_git()\n\n\n\ngolem files\nThe golem functions in dev/01_start.R are for setting the golem options and using recommended tests.\n\nOptions: golem::set_golem_options()\nTests (with testthat): golem::use_recommended_tests()\nFavicon: golem::use_favicon()\nHelper functions: golem::use_utils_ui() and golem::use_utils_server() create golem’s UI (R/golem_utils_ui.R) and server (R/golem_utils_server.R) utility functions in the R/ folder\n\n\n\n\n\n\n\ngolem gives away lots of free code!\n\n\n\n\n\n\nBoth R/golem_utils_ui.R and R/golem_utils_server.R contain a lot of helper functions that come in handy if you’re tired of writing out particular function names (like reactiveValuesToList() or column(width = 6)/column(width = 12))\nCheck them out here:\n\ngolem_utils_ui.R\ngolem_utils_server.R\n\n\n\n\n\n\n\nApp files\nThe dev/02_dev.R file covers developing a golem app-package. Most of the golem functions are for creating files in the R/ and inst/ folders::\nR/\n├── app_config.R\n├── app_server.R\n├── app_ui.R\n└── run_app.R\n\n1 directory, 4 files\n\nR/app_ui.R and R/app_server.R are golem’s version of ui.R and server.R\n\n\n#' The application User-Interface\n#'\n#' @param request Internal parameter for `{shiny}`.\n#'     DO NOT REMOVE.\n#' @noRd\napp_ui &lt;- function(request) {\n  tagList(\n    # Leave this function for adding external resources\n    golem_add_external_resources(),\n    # Your application UI logic\n    fluidPage(\n      h1(\"gap\")\n    )\n  )\n}\n\n\ngolem_add_external_resources() is a wrapper for shiny::addResourcePath(), htmltools::htmlDependency(), and app_sys() (which is a wrapper for system.file()):\n\n\n#' Add external Resources to the Application\n#'\n#' This function is internally used to add external\n#' resources inside the Shiny application.\n#'\ngolem_add_external_resources &lt;- function() {\n  add_resource_path(\n    \"www\",\n    app_sys(\"app/www\")\n  )\n\n  tags$head(\n    favicon(),\n    bundle_resources(\n      path = app_sys(\"app/www\"),\n      app_title = \"gap\"\n    )\n    # Add here other external resources\n    # for example, you can add shinyalert::useShinyalert()\n  )\n}\n\n\n#' The application server-side\n#'\n#' @param input,output,session Internal parameters for {shiny}.\n#'     DO NOT REMOVE.\n#' @import shiny\n#' @noRd\napp_server &lt;- function(input, output, session) {\n  # Your application server logic\n}\n\n\nrun_app.R is an exported function that is available for me to run my app after I’ve installed the package:\n\n\nlibrary(gap)\ngap::run_app()\n\n\n\nCode file wrapper functions\n\ngolem has wrappers for creating modules and helper functions in the R/ folder:\n\n\n## Add modules ----\n## Create a module infrastructure in R/\ngolem::add_module(name = \"name_of_module1\", with_test = TRUE) \ngolem::add_module(name = \"name_of_module2\", with_test = TRUE) \n\n## Add helper functions ----\n## Creates fct_* and utils_*\ngolem::add_fct(\"helpers\", with_test = TRUE)\ngolem::add_utils(\"helpers\", with_test = TRUE)\n\n\nwith_test = TRUE ensures these functions will also create test files in tests/\n\n\n\nConfigure\n\nThe R/app_config.R file contains two functions: app_sys() (covered above) and get_golem_config(), which reads the inst/golem-config.yml configuration file\n\n\ndefault:\n  golem_name: gap\n  golem_version: 0.0.0.9000\n  app_prod: no\nproduction:\n  app_prod: yes\ndev:\n  golem_wd: !expr here::here()\n\n\ngolem-config.yml gives access to the app version, name, and (development) working directory, so it can be used to add “production-only elements” and is “shareable across golem projects”\n\ngolem uses app_sys() (a wrapper around system.file()) to add external resources to the application (app_sys() is included in the R/app_config.R file)\n\n\n# Access files in the current app\napp_sys &lt;- function(...) {\n  system.file(..., package = \"gap\")\n}\n\n\nget_golem_config() is also included in the R/app_config.R file\n\n\n# Read App Config\nget_golem_config &lt;- function(\n  value,\n  config = Sys.getenv(\n    \"GOLEM_CONFIG_ACTIVE\",\n    Sys.getenv(\n      \"R_CONFIG_ACTIVE\",\n      \"default\"\n    )\n  ),\n  use_parent = TRUE,\n  # Modify this if your config file is somewhere else\n  file = app_sys(\"golem-config.yml\")\n) {\n  config::get(\n    value = value,\n    config = config,\n    file = file,\n    use_parent = use_parent\n  )\n}\n\n\n\nTesting\nThe tests/ folder is created in dev/01_start.R with golem::use_recommended_tests(), which is a wrapper around usethis::use_testthat()\n\ngolem::use_recommended_tests() adds the spelling package to our DESCRIPTION and updates the WORDLIST1\n\n\nThe tests folder uses the testthat framework\n\n\ntests/testthat/\n            ├── _snaps\n            ├── test-golem-recommended.R\n            ├── test-golem_utils_server.R\n            └── test-golem_utils_ui.R\n\n2 directories, 4 files\n\n\n\nExternal\nThe inst/ file initially has the following contents/structure:\ninst/\n  ├── WORDLIST\n  ├── app/\n  │   └── www/\n  │       └── favicon.ico\n  └── golem-config.yml \nThe golem-config.yml file is covered above, but the inst/app/ folder works just like the inst/extdata folder (it is loaded when the package is installed and makes these files available to the application).\ndev/02_dev.R includes golem wrappers for including CSS, JavaScript, and SASS files to the inst/app/www/ folder:\n\ngolem::add_js_file(\"script\")\ngolem::add_js_handler(\"handlers\")\ngolem::add_css_file(\"custom\")\ngolem::add_sass_file(\"custom\")\n\n\n\nDeploy\nThe final script in the guided tour contains functions for deploying a new application to Posit Connect or Docker (it opens automatically after completing the dev/02_dev.R)\nRStudio (Posit) Connect \n\ngolem::add_rstudioconnect_file(), golem::add_shinyappsio_file(), and golem::add_shinyserver_file()\n\nDocker \n\ngolem::add_dockerfile_with_renv() and golem::add_dockerfile_with_renv_shinyproxy()\n\nI’ll deploy my app using shinyapps.io, so after running golem::add_shinyappsio_file() I will see the following output and a new app.R file.\n\ngolem::add_shinyappsio_file()\n── Creating _disable_autoload.R ──────────────────────────────────────────────────────\n✔ Created\n✔ Setting active project to '/Users/mjfrigaard/projects/gap'\n✔ Adding '^app\\\\.R$' to '.Rbuildignore'\n✔ Adding '^rsconnect$' to '.Rbuildignore'\n✔ Adding 'pkgload' to Imports field in DESCRIPTION\n• Refer to functions with `pkgload::fun()`\n✔ File created at /Users/mjfrigaard/projects/gap/app.R\nTo deploy, run:\n• rsconnect::deployApp()\n\n• Note that you'll need to upload the whole package to ShinyApps.io\n\n\napp.R contents\n\n\n# Launch the ShinyApp (Do not remove this comment)\n# To deploy, run: rsconnect::deployApp()\n# Or use the blue button on top of this file\n\npkgload::load_all(export_all = FALSE, helpers = FALSE, attach_testthat = FALSE)\noptions( \"golem.app.prod\" = TRUE)\ngap::run_app() # add parameters here (if any)"
  },
  {
    "objectID": "golem.html#writing-code",
    "href": "golem.html#writing-code",
    "title": "The golem framework",
    "section": "Writing code",
    "text": "Writing code\nBuilding an application with golem is very similar to developing an R package. However, some of the app development processes have been streamlined into wrapper functions. I’ll cover creating modules and utility functions using these helpers in the following sections.\n\nModules & utility functions\nNew modules and utility functions can be created with golem::add_module() or golem::add_utils()/golem::add_fct().2\nThe code below creates the following files:\nadd_module(name = 'name', \n           fct = 'fun', \n           utils = 'fun', \n           with_test = TRUE, \n           export = TRUE)\n\nR/mod_name.R: a boilerplate Shiny module (ui and server functions)\n\n\n#' name UI Function\n#'\n#' @description A shiny Module.\n#'\n#' @param id,input,output,session Internal parameters for {shiny}.\n#'\n#' @rdname mod_name\n#' @export \n#'\n#' @importFrom shiny NS tagList \nmod_name_ui &lt;- function(id){\n  ns &lt;- NS(id)\n  tagList(\n \n  )\n}\n    \n#' name Server Functions\n#'\n#' @rdname mod_name\n#' @export \nmod_name_server &lt;- function(id){\n  moduleServer( id, function(input, output, session){\n    ns &lt;- session$ns\n \n  })\n}\n    \n## To be copied in the UI\n# mod_name_ui(\"name_1\")\n    \n## To be copied in the server\n# mod_name_server(\"name_1\")\n\n\nR/mod_name_fct_fun.R and R/mod_name_utils_fun.R: empty R files in the R/ folder (with the same prefix as the module).\ntests/testthat/test-mod_name.R: a test file for the module (with some boilerplate tests)\n\n\ntestServer(mod_name_server,\n  # Add here your module params\n  args = list(), {\n    ns &lt;- session$ns\n    expect_true(\n      inherits(ns, \"function\")\n    )\n    expect_true(\n      grepl(id, ns(\"\"))\n    )\n    expect_true(\n      grepl(\"test\", ns(\"test\"))\n    )\n    # Here are some examples of tests you can\n    # run on your module\n    # - Testing the setting of inputs\n    # session$setInputs(x = 1)\n    # expect_true(input$x == 1)\n    # - If ever your input updates a reactiveValues\n    # - Note that this reactiveValues must be passed\n    # - to the testServer function via args = list()\n    # expect_true(r$x == 1)\n    # - Testing output\n    # expect_true(inherits(output$tbl$html, \"html\"))\n})\n \ntest_that(\"module ui works\", {\n  ui &lt;- mod_name_ui(id = \"test\")\n  golem::expect_shinytaglist(ui)\n  # Check that formals have not been removed\n  fmls &lt;- formals(mod_name_ui)\n  for (i in c(\"id\")) {\n    expect_true(i %in% names(fmls))\n  }\n})\n\n\nBelow is the mod_var module:\n\n\nmod_var_ui &lt;- function(id) {\n  ns &lt;- NS(id)\n  tagList(\n    selectInput(\n      inputId = ns(\"y\"),\n      label = \"Y-axis:\",\n      choices = c(\n        \"IMDB rating\" = \"imdb_rating\",\n        \"IMDB number of votes\" = \"imdb_num_votes\",\n        \"Critics Score\" = \"critics_score\",\n        \"Audience Score\" = \"audience_score\",\n        \"Runtime\" = \"runtime\"\n      ),\n      selected = \"audience_score\"\n    ),\n    selectInput(\n      inputId = ns(\"x\"),\n      label = \"X-axis:\",\n      choices = c(\n        \"IMDB rating\" = \"imdb_rating\",\n        \"IMDB number of votes\" = \"imdb_num_votes\",\n        \"Critics Score\" = \"critics_score\",\n        \"Audience Score\" = \"audience_score\",\n        \"Runtime\" = \"runtime\"\n      ),\n      selected = \"imdb_rating\"\n    ),\n    selectInput(\n      inputId = ns(\"z\"),\n      label = \"Color by:\",\n      choices = c(\n        \"Title Type\" = \"title_type\",\n        \"Genre\" = \"genre\",\n        \"MPAA Rating\" = \"mpaa_rating\",\n        \"Critics Rating\" = \"critics_rating\",\n        \"Audience Rating\" = \"audience_rating\"\n      ),\n      selected = \"mpaa_rating\"\n    ),\n    sliderInput(\n      inputId = ns(\"alpha\"),\n      label = \"Alpha:\",\n      min = 0, max = 1, step = 0.1,\n      value = 0.5\n    ),\n    sliderInput(\n      inputId = ns(\"size\"),\n      label = \"Size:\",\n      min = 0, max = 5,\n      value = 2\n    ),\n    textInput(\n      inputId = ns(\"plot_title\"),\n      label = \"Plot title\",\n      placeholder = \"Enter plot title\"\n    )\n  )\n}\nmod_var_server &lt;- function(id) {\n\n  moduleServer(id, function(input, output, session) {\n    return(\n      reactive({\n        list(\n          \"y\" = input$y,\n          \"x\" = input$x,\n          \"z\" = input$z,\n          \"alpha\" = input$alpha,\n          \"size\" = input$size,\n          \"plot_title\" = input$plot_title\n        )\n      })\n    )\n  })\n}\n\nView the modules I use in the gap application here on GitHub.\n\nThe scatter_plot() utility function file end with a _utils suffix:\n\n\nscatter_plot &lt;- function(df, x_var, y_var, col_var, alpha_var, size_var) {\n    ggplot2::ggplot(data = df,\n      ggplot2::aes(x = .data[[x_var]],\n          y = .data[[y_var]],\n          color = .data[[col_var]])) +\n      ggplot2::geom_point(alpha = alpha_var, size = size_var)\n\n}\n\n\n\n\n\n\n\nModule names\n\n\n\n\n\n\nIncluding mod in the name of module scripts and functions makes it easier to separate them from other functions in my package namespace, if I’m using tab-completion, or if I’m searching for a particular file using Ctrl + .:\n\n\n\n\n\n\n\nFigure 2: Go to File/Function in RStudio\n\n\n\n\n\n\n\n\nAdding tests\n\nInclude tests for new modules and functions using the with_test = TRUE argument\n\n\ntests/testthat/\n            ├── _snaps\n            ├── test-golem-recommended.R\n            ├── test-golem_utils_server.R\n            ├── test-golem_utils_ui.R\n            ├── test-mod_plot.R\n            ├── test-mod_plot_utils.R\n            └── test-mod_var_input.R\n\n2 directories, 6 files\n\n\n\nAdding resources\n\nTo include other files (like images), add the image file to inst/app/www/, then add the www/ to the path (see example UI code below)\n\n\n# add icon\nshiny::tags$img(src = \"www/shiny.png\")\n\nIf I wanted to include images in their own folder (like images/), I can use golem::addResourcePath() to add the name of the sub-folder to inst/app/\n\n# add icon\ngolem::add_resource_path(\n          prefix = 'images', \n          directoryPath = system.file('app/images', \n                                      package = 'gap'))\n\nNow I can add the image file to the inst/app/www/images/ folder and include the following code in the UI:\n\n# add icon\nshiny::tags$img(src = \"www/images/golem-hex.png\")\n\n\nIn R/app_ui.R, the app_ui() function contains the UI layout functions (fluidPage(), sidebarLayout(), etc.), and a call to golem_add_external_resources():\n\n\n#' The application User-Interface\n#'\n#' @param request Internal parameter for `{shiny}`.\n#'     DO NOT REMOVE.\n#' @import shiny\n#' @noRd\napp_ui &lt;- function(request) {\n  tagList(\n    # Leave this function for adding external resources\n    golem_add_external_resources(),\n    # Your application UI logic\n    fluidPage(\n      sidebarLayout(\n        sidebarPanel(\n          mod_var_ui(\"vars\"),\n          h6(\n            img(src = \"www/images/shiny.png\", width = \"15%\"),\n            em(\n              \"The data for this application comes from the \",\n              a(\"Building web applications with Shiny\",\n                href = \"https://rstudio-education.github.io/shiny-course/\"\n              ),\n              \"tutorial\"\n            )\n          )\n        ),\n        mainPanel(\n          fluidRow(\n            br(),\n            p(em(\"Brought to you by: \"),\n              # add golem hex (in www/images/)\n              img(src = \"www/images/golem-hex.png\", width = \"5%\")\n            )\n          ),\n          mod_plot_ui(\"plot\")\n        )\n      )\n    )\n  )\n}\n\nNow when I run devtools::load_all(), devtools::document(), install/restart, and load the package, I see the images properly rendered with the application:\n\n\n\n\n\n(a) gap::run_app()\n\n\nFigure 3: Images in gap\n\n\n\n\n\n\n\n\nUsing the inst/ folder\n\n\n\n\n\n\ngolem takes advantage of the inst/ folder and R package structure to allow users to provide additional ‘assets’ to the application.\nFor example, if we use system.file() on the local directory ('.'), we see all the folders available to the application at runtime\nfs::dir_tree(path = system.file('', package = 'gap'))\n/Library/Frameworks/R.framework/Versions/4.3-x86_64/Resources/library/gap/.\n├── DESCRIPTION\n├── INDEX\n├── LICENSE\n├── Meta\n│   ├── Rd.rds\n│   ├── data.rds\n│   ├── features.rds\n│   ├── hsearch.rds\n│   ├── links.rds\n│   ├── nsInfo.rds\n│   └── package.rds\n├── NAMESPACE\n├── R\n│   ├── gap\n│   ├── gap.rdb\n│   └── gap.rdx\n├── WORDLIST\n├── app\n│   └── www\n│       ├── favicon.ico\n│       └── images\n│           ├── golem-hex.png\n│           └── shiny.png\n├── data\n│   ├── Rdata.rdb\n│   ├── Rdata.rds\n│   └── Rdata.rdx\n├── extdata\n│   └── movies.RData\n├── golem-config.yml\n├── help\n│   ├── AnIndex\n│   ├── aliases.rds\n│   ├── gap.rdb\n│   ├── gap.rdx\n│   └── paths.rds\n└── html\n    ├── 00Index.html\n    └── R.css"
  },
  {
    "objectID": "golem.html#gap-features",
    "href": "golem.html#gap-features",
    "title": "The golem framework",
    "section": "gap features",
    "text": "gap features\nIf you typically build shiny apps in a single app.R file (or in ui.R and server.R files), the golem framework might seem overwhelming. I’ll give a quick overview of some areas I found confusing when I started using goelm:\n\ngolem apps are run using the gap::run_app() function (included in the R/ folder)\nWhile developing, golem also comes with a run_dev function that reads the R/run_dev.R file and evaluates the code.\ndev/ contains golem‘s ’guided tour’ scripts (01_start.R, 02_dev.R, 03_deploy.R) and run_dev.R (covered above)\nR/: the primary app files for the UI and server are stored in the R/ folder (R/app_ui.R, R/app_server.R, R/run_app.R), as well as the configuration function (R/app_config.R):\ninst/: the inst/ folder holds the golem-config.yml and location of any external app files.\nDeploying the application can be done with a single function: rsconnect::deployApp()"
  },
  {
    "objectID": "golem.html#recap",
    "href": "golem.html#recap",
    "title": "The golem framework",
    "section": "Recap",
    "text": "Recap\nGenerally speaking, golem’s start-up scripts save time and serve as a gentle introduction to some of the functions used in R package development.\nThe add_ functions are an area where golem really separates itself from standard R package development. Having dedicated Shiny development functions (and the app/inst/www folder) reduces the cognitive overhead of mapping the standard R package development functions (i.e., those from usethis and devtools) into Shiny app-package development.\ngolem is a popular framework for a reason–it’s designed to allow developers to build a shiny application and R package simultaneously. Added bonuses include taking advantage of RStudio’s build tools, great documentation, and user-guides.."
  },
  {
    "objectID": "golem.html#gap-package-dependencies",
    "href": "golem.html#gap-package-dependencies",
    "title": "The golem framework",
    "section": "gap package dependencies",
    "text": "gap package dependencies\ngolem apps add golem as a dependency.\n\npak::local_deps_explain(\n  deps = 'golem', \n  root = \"_apps/gap\")\nℹ Loading metadata database\n✔ Loading metadata database ... done\n\ngap -&gt; golem\n\n\nNAMESPACE\nBelow is the namespace file for gap.\n# Generated by roxygen2: do not edit by hand\n\nexport(run_app)\nimport(shiny)\nimportFrom(rlang,.data)\nAs you can see, I’m only exporting the run_app() function from gap.\n\n\nImports\nThe Imports field in the DESCRIPTION file lists the following:\nImports: \n    config (&gt;= 0.3.1),\n    ggplot2,\n    golem (&gt;= 0.3.5),\n    rlang,\n    shiny (&gt;= 1.7.4),\n    stringr,\n    tools\nThe graph in the application uses ggplot2, rlang, and tools. golem is importing config (and itself).\nThe pak::local_deps_tree() function can tell us what the dependencies look like for an application built with golem:\n\npak::local_deps_tree(root = \"_apps/gap\")\nlocal::_apps/gap 0.0.0.9000 ✨👷🏿‍♀️ ⬇ (unknown size)\n├─config 0.3.2 ✨ ⬇ (99.78 kB)\n│ └─yaml 2.3.7 ✨ ⬇ (228.15 kB)\n├─ggplot2 3.4.4 ✨\n│ ├─cli 3.6.1 ✨\n│ ├─glue 1.6.2 ✨\n│ ├─gtable 0.3.4 ✨\n│ │ ├─cli\n│ │ ├─glue\n│ │ ├─lifecycle 1.0.3 ✨ ⬇ (123.60 kB)\n│ │ │ ├─cli\n│ │ │ ├─glue\n│ │ │ └─rlang 1.1.1 ✨\n│ │ └─rlang\n│ ├─isoband 0.2.7 ✨\n│ ├─lifecycle\n│ ├─MASS 7.3-60 &lt; 7.3-60.1 ✋\n│ ├─mgcv 1.9-0 \n│ │ ├─Matrix 1.6-1.1 \n│ │ │ └─lattice 0.22-5 \n│ │ └─nlme 3.1-163 \n│ │   └─lattice\n│ ├─rlang\n│ ├─scales 1.2.1 ✨\n│ │ ├─farver 2.1.1 ✨\n│ │ ├─labeling 0.4.3 ✨\n│ │ ├─lifecycle\n│ │ ├─munsell 0.5.0 ✨\n│ │ │ └─colorspace 2.1-0 ✨\n│ │ ├─R6 2.5.1 ✨ ⬇ (83.05 kB)\n│ │ ├─RColorBrewer 1.1-3 ✨\n│ │ ├─rlang\n│ │ └─viridisLite 0.4.2 ✨\n│ ├─tibble 3.2.1 ✨\n│ │ ├─fansi 1.0.5 ✨\n│ │ ├─lifecycle\n│ │ ├─magrittr 2.0.3 ✨\n│ │ ├─pillar 1.9.0 ✨\n│ │ │ ├─cli\n│ │ │ ├─fansi\n│ │ │ ├─glue\n│ │ │ ├─lifecycle\n│ │ │ ├─rlang\n│ │ │ ├─utf8 1.2.4 ✨\n│ │ │ └─vctrs 0.6.4 ✨\n│ │ │   ├─cli\n│ │ │   ├─glue\n│ │ │   ├─lifecycle\n│ │ │   └─rlang\n│ │ ├─pkgconfig 2.0.3 ✨\n│ │ ├─rlang\n│ │ └─vctrs\n│ ├─vctrs\n│ └─withr 2.5.2 ✨ ⬇ (230.90 kB)\n├─golem 0.4.1 ✨ ⬇ (1.15 MB)\n│ ├─attempt 0.3.1 ✨ ⬇ (109.54 kB)\n│ │ └─rlang\n│ ├─config\n│ ├─here 1.0.1 ✨ ⬇ (51.02 kB)\n│ │ └─rprojroot 2.0.3 ✨ ⬇ (100.78 kB)\n│ ├─htmltools 0.5.6.1 ✨ ⬇ (355.95 kB)\n│ │ ├─digest 0.6.33 ✨ ⬇ (297.88 kB)\n│ │ ├─base64enc 0.1-3 ✨\n│ │ ├─rlang\n│ │ ├─fastmap 1.1.1 ✨ ⬇ (201.10 kB)\n│ │ └─ellipsis 0.3.2 ✨\n│ │   └─rlang\n│ ├─rlang\n│ ├─shiny 1.7.5.1 ✨ ⬇ (4.35 MB)\n│ │ ├─httpuv 1.6.12 ✨ ⬇ (2.66 MB)\n│ │ │ ├─later 1.3.1 ✨ ⬇ (607.27 kB)\n│ │ │ │ ├─Rcpp 1.0.11 ✨ ⬇ (3.31 MB)\n│ │ │ │ └─rlang\n│ │ │ ├─promises 1.2.1 ✨ ⬇ (1.82 MB)\n│ │ │ │ ├─fastmap\n│ │ │ │ ├─later\n│ │ │ │ ├─magrittr\n│ │ │ │ ├─R6\n│ │ │ │ ├─Rcpp\n│ │ │ │ └─rlang\n│ │ │ ├─R6\n│ │ │ └─Rcpp\n│ │ ├─mime 0.12 ✨\n│ │ ├─jsonlite 1.8.7 ✨ ⬇ (1.13 MB)\n│ │ ├─xtable 1.8-4 ✨ ⬇ (701.99 kB)\n│ │ ├─fontawesome 0.5.2 ✨ ⬇ (1.36 MB)\n│ │ │ ├─rlang\n│ │ │ └─htmltools\n│ │ ├─htmltools\n│ │ ├─R6\n│ │ ├─sourcetools 0.1.7-1 ✨ ⬇ (137.44 kB)\n│ │ ├─later\n│ │ ├─promises\n│ │ ├─crayon 1.5.2 ✨\n│ │ ├─rlang\n│ │ ├─fastmap\n│ │ ├─withr\n│ │ ├─commonmark 1.9.0 ✨ ⬇ (357.18 kB)\n│ │ ├─glue\n│ │ ├─bslib 0.5.1 ✨ ⬇ (5.90 MB)\n│ │ │ ├─base64enc\n│ │ │ ├─cachem 1.0.8 ✨ ⬇ (69.43 kB)\n│ │ │ │ ├─rlang\n│ │ │ │ └─fastmap\n│ │ │ ├─htmltools\n│ │ │ ├─jquerylib 0.1.4 ✨ ⬇ (526.36 kB)\n│ │ │ │ └─htmltools\n│ │ │ ├─jsonlite\n│ │ │ ├─memoise 2.0.1 ✨ ⬇ (47.96 kB)\n│ │ │ │ ├─rlang\n│ │ │ │ └─cachem\n│ │ │ ├─mime\n│ │ │ ├─rlang\n│ │ │ └─sass 0.4.7 ✨ ⬇ (2.41 MB)\n│ │ │   ├─fs 1.6.3 ✨ ⬇ (625.41 kB)\n│ │ │   ├─rlang\n│ │ │   ├─htmltools\n│ │ │   ├─R6\n│ │ │   └─rappdirs 0.3.3 ✨\n│ │ ├─cachem\n│ │ ├─ellipsis\n│ │ └─lifecycle\n│ └─yaml\n├─rlang\n├─shiny\n└─stringr 1.5.0 ✨ ⬇ (311.21 kB)\n  ├─cli\n  ├─glue\n  ├─lifecycle\n  ├─magrittr\n  ├─rlang\n  ├─stringi 1.7.12 ✨ ⬇ (14.63 MB)\n  └─vctrs\n\nKey:  ✨ new | ✋ outdated |  ⬇ download | 👷🏿‍♀️ build"
  },
  {
    "objectID": "golem.html#footnotes",
    "href": "golem.html#footnotes",
    "title": "The golem framework",
    "section": "Footnotes",
    "text": "Footnotes\n\n\nThe tests golem creates in the tests/testthat/ folder can serve as a nice guide for users new to testthat↩︎\nNew functions are added to the R/ folder and include @noRd by default (which must be removed create the .Rd files in the man/ folder)↩︎"
  },
  {
    "objectID": "rhino.html",
    "href": "rhino.html",
    "title": "the rhino framework",
    "section": "",
    "text": "rhino apps aren’t packages. Instead, they use the box package to build modules, which ‘completely replaces the base R library and require functions.’"
  },
  {
    "objectID": "rhino.html#rap",
    "href": "rhino.html#rap",
    "title": "the rhino framework",
    "section": "",
    "text": "rhino apps aren’t packages. Instead, they use the box package to build modules, which ‘completely replaces the base R library and require functions.’"
  },
  {
    "objectID": "rhino.html#start",
    "href": "rhino.html#start",
    "title": "the rhino framework",
    "section": "Start",
    "text": "Start\nTo create a new rhino application:\n\nSelect Project &gt; New Project &gt; New Directory, and Shiny Application using rhino\n\nThe New Project Wizard will require a Directory name and subdirectory. I’ve also left Github Actions CI selected (the default)\n\nThe following package(s) will be updated in the lockfile:\n\n# CRAN ------------------------------------------------------\n- renv           [* -&gt; 1.0.3]\n\n# GitHub ----------------------------------------------------\n- testthat       [* -&gt; r-lib/testthat@HEAD]\n\n# RSPM ------------------------------------------------------\n  &lt; &lt; &lt; &lt; &lt; &lt; &lt; OMITTED &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt;\nThe version of R recorded in the lockfile will be updated:\n- R              [* -&gt; 4.3.1]\n\n- Lockfile written to \"~/projects/dev/brap/renv.lock\".\n- Project '~/projects/dev/brap' loaded. [renv 1.0.3]\n✔ Initialized renv.\n✔ Application structure created.\n✔ Unit tests structure created.\n✔ E2E tests structure created.\n✔ Github Actions CI added.\n\nThis initializes the new rhino app by opening the .Rproj file in RStudio.\nIf I wanted to create the rap application from the console, I would use the following:\n\ninstall.packages(\"rhino\")\nrhino::init(\"/Users/mjfrigaard/projects/rap\")\n\nThe initial folder structure for a new rhino app is below:\n\nrap/\n├── app\n│   ├── js\n│   ├── logic\n│   ├── main.R\n│   ├── static\n│   ├── styles\n│   └── view\n├── app.R\n├── brap.Rproj\n├── config.yml\n├── dependencies.R\n├── renv\n│   ├── activate.R\n│   ├── library\n│   └── settings.json\n├── renv.lock\n├── rhino.yml\n└── tests\n    ├── cypress\n    ├── cypress.json\n    └── testthat\n\n12 directories, 10 files\n\nThe rhino package website has excellent documentation on their app structure philosophy, and it’s worth reading through this before getting started. I’ll do my best to summarize the application’s files below:\n\napp/\nThe app/ folder contains the primary folder and files:\n\napp/\n  ├── js/\n  │   └── index.js\n  ├── logic/\n  │   └── __init__.R\n  ├── main.R\n  ├── static/\n  │   └── favicon.ico\n  ├── styles/\n  │   └── main.scss\n  └── view/\n      └── __init__.R\n\n6 directories, 6 files\n\n\n\njs/: the js folder initially contains a blank index.js script\n\nlogic/: the logic folder contains code independent from Shiny \n\nlogic/__init__.R is originally blank, but provides a link to the website section on project structure\n\n\n\n# Logic: application code independent from Shiny.\n# https://go.appsilon.com/rhino-project-structure\n\n\n\nstatic/: the static/ folder will contain external resources (like JavaScript files) and is similar to the sub-folders in inst/ from golem and leprechaun\nstyles/: the styles/ folder will hold custom styles (CSS and HTML) in the styles/main.css file (which is initially blank)\nview/: the view/ folder holds the code which describes the user interface of your application and relies upon the reactive capabilities of Shiny. \n\nview/__init__.R is also initially blank, but provides a link to the website section on project structure\n\n\n\n# View: Shiny modules and related code.\n# https://go.appsilon.com/rhino-project-structure\n\n\n\nmain.R: the main.R file contains the ui and server application code \n\napp/main.R contains the code for the application I see when I run rhino::app()\n\n\n\nbox::use(\n  shiny[bootstrapPage, moduleServer, NS, renderText, tags, textOutput],\n)\n\n#' @export\nui &lt;- function(id) {\n  ns &lt;- NS(id)\n  bootstrapPage(\n    tags$h3(\n      textOutput(ns(\"message\"))\n    )\n  )\n}\n\n#' @export\nserver &lt;- function(id) {\n  moduleServer(id, function(input, output, session) {\n    output$message &lt;- renderText(\"Hello!\")\n  })\n}\n\n\n\n\n\n\n\n\nbox::use()?\n\n\n\n\n\n\nIf box’s syntax looks strange–don’t worry! It looked strange to me too at first. But it’s actually something special with those roxygen2 tags. I’ll cover it more in the Build section below.\n\n\n\n\n\n\napp.R\n\napp.R is the file that will run my application and contains the rhino::app() function:\n\n\n# Rhino / shinyApp entrypoint. Do not edit.\nrhino::app()\n\nrhino has a ‘minimal app.R’ philosophy, and the call to rhino::app() performs multiple operations beyond shiny::runApp()\n\n\nconfig.yml\n\nconfig.yml is a YAML file that follows the config package format. This file initially contains two calls to Sys.getenv():\n\ndefault:\n  rhino_log_level: !expr Sys.getenv(\"RHINO_LOG_LEVEL\", \"INFO\")\n  rhino_log_file: !expr Sys.getenv(\"RHINO_LOG_FILE\", NA)\n\nRead more about how to use config.yml in the Environments section of the How to: Manage secrets and environments vignette.\n\n\n\ndependencies.R\n\ndependencies.R is an .R script that contains any other packages used by the application. Using this file is covered in the Manage Dependencies vignette on the package website.\n\nAs I can see from the note in the comments, the dependencies will be tracked using packrat in rsconnect.\n\n# This file allows packrat (used by rsconnect during deployment)\n# to pick up dependencies.\nlibrary(rhino)\n\n\nI know I’ll be using ggplot2, stringr, rlang, and bslib in this application, so I’ll load those there.\n\n\nrhino::pkg_install(c(\"ggplot2\", \"stringr\", \"rlang\", \"bslib\"))\n\n\nThis will automatically update dependencies.R and renv\n\n\n\nrenv/\n\nThe renv/ folder contains the R version and packages used to build the application:\n\n\nrap/\n  ├── renv/\n  │    ├── activate.R\n  │    ├── library/\n  │    │   └── R-4.2\n  │    │       └── x86_64-apple-darwin17.0\n  │    ├── sandbox/\n  │    │   └── R-4.2\n  │    │       └── x86_64-apple-darwin17.0\n  │    └── settings.dcf\n  └── renv.lock\n\n\nrenv.lock contains the packages and R version used in the application. Read more about getting started with renv.\n\n\n\nrhino.yml\n\nrhino.yml is the configuration file and contains options for setting how Sass is built or for importing from another application structure to rhino.\n\nthe code below showcases the optional arguments (and is not included in the application)\n\nsass: string               # required | one of: \"node\", \"r\"\nlegacy_entrypoint: string  # optional | one of: \"app_dir\", \"source\", \"box_top_level\"\n\nRead more about rhino.yml in the Explanation: Configuring Rhino - rhino.yml vignette.\n\n\n\n\ntests/\n\ntests/ contains two sub-folders, cypress/ and testthat/:\n\ntests/\n    ├── cypress/\n    │   └── integration/\n    │       └── app.spec.js\n    ├── cypress.json\n    └── testthat/\n        └── test-main.R\n\n\n\ncypress/\n\ntests/cypress/ holds folders for using the Cypress web and component testing framework.\n\nThis is also covered in the ‘Use shinttest2 vignette’.\n\ntests/\n    ├── cypress/\n    │    └── integration/\n    │        └── app.spec.js\n    └── cypress.json\n\n\n\ntestthat/\n\ntests/testthat/ contains the architecture for writing tests with testthat\n\nrhino also has a helper function for running all tests in the testthat/ folder (rhino::test_r())\n\ntests/\n    └── testthat/\n            └── test-main.R"
  },
  {
    "objectID": "rhino.html#build",
    "href": "rhino.html#build",
    "title": "the rhino framework",
    "section": "Build",
    "text": "Build\nUnlike the previous applications in this series, rhino applications don’t use the NAMESPACE and DESCRIPTION to manage dependencies. Instead, they use the box modules to explicitly import packages and functions\n\nbox\n\n\n\n\n\n\n\n\n\n\n\nrhino apps use box to create modules, which is handy, because it’s specifically designed for writing “reusable, composable and modular R code”\nQuick refresher: if I’m building a shiny app,\n\nI’ll install packages using install.packages('&lt;package&gt;')\nWhen I want to use an installed package, I run library(&lt;package&gt;), which loads the package namespace ‘and attach[es] it on the search list’\nIf the application gets converted into an R package, I track dependencies in the DESCRIPTION and use pkg::fun() (or add roxygen2 tags @importFrom or @import, which are converted into NAMESPACE directives)\n\nSo, I run library(&lt;package&gt;) to load the entire package namespace when I want to use a function, but when developing R packages, it’s recommended I use pkg::fun() to specify the package and function.\nPut another way,\n“If I only need one or two items from a package, why am I loading everything in the namespace with library()?“\nThis is where box comes in–it’s designed to ‘completely replace the base R library and require functions’.\nA box module is essentially just an R script in a folder. However, in box::use(), instead of loading packages and functions using library() or ::, I can encapsulate and explicitly import packages and functions in these R scripts using the syntax package[function].\n\nThe module below imports the foo() and bar() functions from the pkg package in the mod.R file (in the box/ folder)\n\n# contents of box/mod.R\n#' @export\nbox::use(\n  pkg[foo, bar]\n)\n\nI can now access foo() and bar() from mod.R using box::use(box/mod):\n\n# using contents of box/mod.R\nbox::use(\n  box/mod\n)\nThis has been a very brief overview of box, so I highly recommend consulting the box website and vignettes (especially “the hierarchy of module environments”). The rhino website also has a great overview on using box with shiny apps (I also have a collection of box module examples in this repo.)\n\n\nModules\nNow that I’ve covered a bit on how box modules work, I am going to create the application modules. New modules should be created in the app/view/ folder.\nThe first module we’ll create is the app/view/inputs.R module for collecting the user inputs\n\nThe code below is placed in app/view/inputs.R\nClick Code to see app/view/inputs.R\n\n# app/view/inputs.R\n\n# define module functions\nbox::use(\n  shiny[\n    NS, tagList, selectInput, h3,\n    sliderInput, textInput, moduleServer, reactive\n  ],\n)\n\n#' input values UI\n#' @export\nui &lt;- function(id) {\n  ns &lt;- NS(id)\n  tagList(\n    selectInput(\n      inputId = ns(\"y\"),\n      label = \"Y-axis:\",\n      choices = c(\n        \"IMDB rating\" = \"imdb_rating\",\n        \"IMDB number of votes\" = \"imdb_num_votes\",\n        \"Critics Score\" = \"critics_score\",\n        \"Audience Score\" = \"audience_score\",\n        \"Runtime\" = \"runtime\"\n      ),\n      selected = \"audience_score\"\n    ),\n    selectInput(\n      inputId = ns(\"x\"),\n      label = \"X-axis:\",\n      choices = c(\n        \"IMDB rating\" = \"imdb_rating\",\n        \"IMDB number of votes\" = \"imdb_num_votes\",\n        \"Critics Score\" = \"critics_score\",\n        \"Audience Score\" = \"audience_score\",\n        \"Runtime\" = \"runtime\"\n      ),\n      selected = \"imdb_rating\"\n    ),\n    selectInput(\n      inputId = ns(\"z\"),\n      label = \"Color by:\",\n      choices = c(\n        \"Title Type\" = \"title_type\",\n        \"Genre\" = \"genre\",\n        \"MPAA Rating\" = \"mpaa_rating\",\n        \"Critics Rating\" = \"critics_rating\",\n        \"Audience Rating\" = \"audience_rating\"\n      ),\n      selected = \"mpaa_rating\"\n    ),\n    sliderInput(\n      inputId = ns(\"alpha\"),\n      label = \"Alpha:\",\n      min = 0, max = 1, step = 0.1,\n      value = 0.5\n    ),\n    sliderInput(\n      inputId = ns(\"size\"),\n      label = \"Size:\",\n      min = 0, max = 5,\n      value = 2\n    ),\n    textInput(\n      inputId = ns(\"plot_title\"),\n      label = \"Plot title\",\n      placeholder = \"Enter plot title\"\n    )\n  )\n}\n\n#' input values server\n#' @export\nserver &lt;- function(id) {\n  moduleServer(id, function(input, output, session) {\n    return(\n      list(\n        \"x\" = reactive({\n          input$x\n        }),\n        \"y\" = reactive({\n          input$y\n        }),\n        \"z\" = reactive({\n          input$z\n        }),\n        \"alpha\" = reactive({\n          input$alpha\n        }),\n        \"size\" = reactive({\n          input$size\n        }),\n        \"plot_title\" = reactive({\n          input$plot_title\n        })\n      )\n    )\n  })\n}\n\n\n\nInit files\nBack in the app/view/ folder, I want to use the app/view/inputs.R function in the app/main.R. I can do this by adding a __init__.R file in the app/view/ folder with the following contents:\n\nThe __init__.R files are covered on the rhino website:\n\n# View: Shiny modules and related code.\n# https://go.appsilon.com/rhino-project-structure\n#' @export\nbox::use(\n  app/view/inputs)\n\nAfter composing the module in app/view/input.R, I add the input module to the app/main.R file just like the examples above:\n\nNote that I’ve added the necessary functions for using a fluidPage() layout (instead of the default bootstrapPage())\n\nClick Code to see app/main.R\n\n# app/main.R\nbox::use(\n  shiny[\n    NS, fluidPage, sidebarLayout, sidebarPanel, mainPanel,\n    tags, textOutput, moduleServer, renderText\n  ],\n)\n# load inputs module ----\nbox::use(\n  app/view/inputs,\n)\n\n#' @export\nui &lt;- function(id) {\n  ns &lt;- NS(id)\n  fluidPage(\n    sidebarLayout(\n      sidebarPanel(\n        # use inputs module UI ----\n        inputs$ui(ns(\"vals\"))\n      ),\n      mainPanel(\n        tags$h3(\"rap\"),\n        tags$h3(textOutput(ns(\"message\")))\n      )\n    )\n  )\n}\n\n#' @export\nserver &lt;- function(id) {\n  moduleServer(id, function(input, output, session) {\n    # use inputs module server ----\n    inputs$server(\"vals\")\n    output$message &lt;- renderText(\"Hello!\")\n  })\n}\n\n\nAfter saving both app/view/inputs.R and app/main.R, I can click Run App in app.R and check the output:\n\n\n\n\n\n\n\nFigure 1: inputs.R module\n\n\nThe display.R module will show the graph output, but I know this module will require adding the movies data and the scatter_plot() function (both of which I’ll cover below).\n\n\nLogic\nrhino apps come with an app/logic/ folder, which is used to store code for “data manipulation, generating non-interactive plots and graphs, or connecting to an external data source, but outside of definable inputs, it doesn’t interact with or rely on shiny in any way.”\n\nThe scatter_plot() function definitely meets the definition above, so I will write two modules in app/logic: data for importing the movies data, and plot for creating a scatter plot with scatter_plot()\n\napp/logic/data.R: imports movies from my GitHub repo with all the shiny frameworks. Using data in box() modules is tricky (and its a known, issue), but this method works for my application.\n\nClick Code to see app/logic/data.R\n\n# contents of app/logic/data.R\n#' @export\nbox::use(\n  readr[get_csv = read_csv, cols]\n)\n\n#' @export\nmovies_data &lt;- function() {\n  raw_csv_url &lt;- \"https://bit.ly/3Jds4g1\"\n  # use alias for read_csv()\n  get_csv(raw_csv_url, col_types = cols())\n}\n\n\nThe second module, app/logic/plot.R, holds the scatter_plot() function:\n\n\n# contents of app/logic/plot.R\n#' point plot function\n#' @export\nscatter_plot &lt;- function(df, x_var, y_var, col_var, alpha_var, size_var) {\n\nbox::use(\n  ggplot2 = ggplot2[...]\n)\n\n  ggplot(\n    data = df,\n    aes(\n      x = .data[[x_var]],\n      y = .data[[y_var]],\n      color = .data[[col_var]]\n    )\n  ) +\n    geom_point(alpha = alpha_var, size = size_var)\n}\n\n\nThe __init__.R file in app/logic contains the following:\n\n\n# Logic: application code independent from Shiny.\n# https://go.appsilon.com/rhino-project-structure\n#' @export\nbox::use(\n  app/logic/data,\n  app/logic/plot)\n\n\nTo make sure everything is working, I’ll also include a app/logic/check-scatter_plot.R file that contains the following:\n\n\n# contents of app/logic/check-scatter_plot.R\n# contents for app/logic/check-scatter_plot.R\n\n# load modules from logic folder\nbox::use(\n  app/logic/data,\n  app/logic/plot\n)\n\n# import movies data\nmovies &lt;- data$movies_data()\n\n# check point plot\nplot$scatter_plot(\n  df = movies,\n  x_var = 'critics_score', # as string\n  y_var = 'imdb_rating', # as string\n  col_var = 'mpaa_rating', # as string\n  alpha_var = 2 / 3,\n  size_var = 2\n)\n\n\ncheck-scatter_plot.R imports the two logic modules (data and plot), creates the movies data, and checks to see if the data and plotting function work:\n\nAfter saving app/logic/data.R and app/logic/plot.R, I can run the code in check-scatter_plot.R\n\n\n\n\n\n\n\n\nFigure 2: app/logic/check-scatter_plot.R module\n\n\nThe app/view/display.R module can now call box::use() to import the app/logic/data and app/logic/plot.\n\nThe app/view/display.R module contains theui and the server functions:\n\n# app/view/display.R\n# import data and plot modules ----\nbox::use(\n  app/logic/data,\n  app/logic/plot\n)\n\n#' display values ui ----\n#' @export\nui &lt;- function(id) {\nbox::use(\n  shiny[NS, tagList, tags, plotOutput]\n)\n  ns &lt;- NS(id)\n  tagList(\n    tags$br(),\n    tags$blockquote(\n      tags$em(\n        tags$h6(\n          \"The code for this application comes from the \",\n          tags$a(\"Building web applications with Shiny\",\n            href = \"https://rstudio-education.github.io/shiny-course/\"\n          ),\n          \"tutorial\"\n        )\n      )\n    ),\n    plotOutput(outputId = ns(\"scatterplot\"))\n  )\n}\n\n#' display values server ----\n#' @export\nserver &lt;- function(id, var_inputs) {\n\n# load plotting, shiny, tools, and stringr functions\nbox::use(\n  ggplot2 = ggplot2[...],\n  shiny[NS, moduleServer, plotOutput, reactive, renderPlot],\n  tools[toTitleCase],\n  stringr[str_replace_all]\n)\n\n  moduleServer(id, function(input, output, session) {\n\n    # use data$movies_data() ----\n    movies &lt;- data$movies_data()\n\n      inputs &lt;- reactive({\n        plot_title &lt;- toTitleCase(var_inputs$plot_title())\n        list(\n          x = var_inputs$x(),\n          y = var_inputs$y(),\n          z = var_inputs$z(),\n          alpha = var_inputs$alpha(),\n          size = var_inputs$size(),\n          plot_title = plot_title\n        )\n      })\n\n    output$scatterplot &lt;- renderPlot({\n      # use plot$scatter_plot() ----\n      plot &lt;- plot$scatter_plot(\n        df = movies,\n        x_var = inputs()$x,\n        y_var = inputs()$y,\n        col_var = inputs()$z,\n        alpha_var = inputs()$alpha,\n        size_var = inputs()$size\n      )\n      plot +\n        labs(\n          title = inputs()$plot_title,\n          x = str_replace_all(\n            toTitleCase(\n              inputs()$x\n            ),\n            \"_\",\n            \" \"\n          ),\n          y = str_replace_all(\n            toTitleCase(\n              inputs()$y\n            ),\n            \"_\",\n            \" \"\n          )\n        ) +\n        theme_minimal() +\n        theme(legend.position = \"bottom\")\n    })\n  })\n}\n\n\nIn app/main.R, I can place the display module in call to box::use(), then:\n\nAdd display$ui() to the mainPanel()\nIn the server, the output from inputs$server() is assigned to selected_vars, which becomes the var_inputs input for display$server():\n\n# app/view/main.R\n\n# shiny functions\nbox::use(\n  shiny[NS, fluidPage, sidebarLayout, sidebarPanel,\n        mainPanel, tags, textOutput, moduleServer,\n        renderText]\n)\n\n# import modules\nbox::use(\n  # load inputs module ----\n  app/view/inputs,\n  # load display module ----\n  app/view/display\n)\n\n#' rap ui\n#' @export\nui &lt;- function(id) {\n  ns &lt;- NS(id)\n  fluidPage(\n    sidebarLayout(\n      sidebarPanel(\n        # use inputs module UI ----\n        inputs$ui(ns(\"vals\"))\n      ),\n      mainPanel(\n        tags$h3(\"rap\"),\n        tags$h3(textOutput(ns(\"message\"))),\n        # use display module UI ----\n        display$ui(ns(\"disp\"))\n      )\n    )\n  )\n}\n\n#' rap server\n#' @export\nserver &lt;- function(id) {\n  moduleServer(id, function(input, output, session) {\n    # use inputs module server ----\n    selected_vars &lt;- inputs$server(id = \"vals\")\n    # use display module server ----\n    display$server(id = \"disp\",\n                   var_inputs = selected_vars)\n  })\n}\n\n\nAfter saving app/view/data.R and app/view/display.R files, the app/view/ and app/logic/ folders contain the following modules:\n\napp/logic/:\n\napp/logic/\n      ├── __init__.R\n      ├── check-scatter_plot.R\n      ├── data.R\n      └── plot.R\n\n1 directory, 4 files\n\napp/view/:\n\napp/view/\n      ├── __init__.R\n      ├── display.R\n      └── inputs.R\n\n1 directory, 3 files\n\n\nWhen I click Run App in app.R I should see the following output:\n\n\n\n\n\n\n\nFigure 3: rap\n\n\n\n\n\nExternal scripts\nIt’s fairly straightforward to add external resources (i.e., JavaScript, CSS, Sass, etc.) to rhino apps. I’ll use the example from the website to demonstrate because it adds both CSS and JavaScript to the codebase.\n\nThe first place to add code is the UI in app/main.R:\n\nUpdate the call to box::use() and include the layout functions (fluidRow, column, icon)\n\n\n# app/view/main.R\n\n# shiny functions\nbox::use(\n  shiny[\n    NS, fluidPage, sidebarLayout, sidebarPanel,\n    mainPanel, fluidRow, column, tags, icon,\n    textOutput, moduleServer, renderText\n  ]\n)\n\n\nUpdate the mainPanel() to include the title, info button, and display module:\n\n\n  mainPanel(\n    fluidRow(\n      column(\n        width = 12,\n        tags$h3(\"rap\")\n      )\n    ),\n    fluidRow(\n      column(\n        width = 1,\n        offset = 11,\n        # example info button ---\n        tags$button(\n          id = \"help-button\",\n          icon(\"info\")\n        )\n      )\n    ),\n    fluidRow(\n      column(\n        width = 12,\n        # use display module UI ----\n        display$ui(ns(\"disp\"))\n      )\n    )\n  )\n\n\nThe CSS added to app/styles/main.css is the container for the button.\n\n// app/styles/main.scss\n\n.components-container {\n  display: inline-grid;\n  grid-template-columns: 1fr 1fr;\n  width: 100%;\n\n  .component-box {\n    padding: 10px;\n    margin: 10px;\n    box-shadow: 0 4px 8px 0 rgba(0, 0, 0, 0.2), 0 6px 20px 0 rgba(0, 0, 0, 0.19);\n  }\n}\n\nh1 {\n  text-align: center;\n  font-weight: 900;\n}\n\n#help-button {\n  position: fixed;\n  top: 0;\n  right: 0;\n  margin: 10px;\n}\n\nRun rhino::build_sass() to create the app/static/css/app.min.css file (requires node.js)\n\n\nrhino::build_sass()\n\nadded 748 packages in 49s\nbuild-sass\nsass --no-source-map --style=compressed \n  ../app/styles/main.scss:../app/static/css/app.min.css\n\nThis tells me app.min.css has been added to in app/static/css/\n\napp/static/\n      └── css\n           └── app.min.css\n\nAdd the following to app/js/index.js:\n\nexport function showHelp() {\nalert('Learn more about shiny frameworks: https://mjfrigaard.github.io/posts/my-rhino-app/');\n}\n\nRun rhino::build_js() to build the app/static/js/app.min.js (requires node.js)\n\n\nrhino::build_js()\n\nbuild-js\nwebpack\n\nasset app.min.js 502 bytes [emitted] [minimized] (name: main)\nruntime modules 670 bytes 3 modules\n../app/js/index.js 126 bytes [built] [code generated]\nwebpack 5.69.0 compiled successfully in 1300 ms\n\nThe output tells me the app.min.js has been created in app/static/js\n\napp/static/\n      └── js\n          └── app.min.js\n\nBack in app/main.R, I add the onclick to the mainPanel()\n\n\n  mainPanel(\n    fluidRow(\n      column(\n        width = 12,\n        tags$h3(\"rap\")\n      )\n    ),\n    fluidRow(\n      column(\n        width = 1,\n        offset = 11,\n        # example info button ---\n        tags$button(\n          id = \"help-button\",\n          icon(\"info\"),\n          # add 'onclick' after rhino::build_sass()\n          # and rhino::build_js()\n          onclick = \"App.showHelp()\"\n        )\n      )\n    ),\n    fluidRow(\n      column(\n        width = 12,\n        # use display module UI ----\n        display$ui(ns(\"disp\"))\n      )\n    )\n  )\n\nNow when I save everything and click ‘Run App’ in app.R I should see the info button (and message):\n\n\n\n\n\n\n\n\nFigure 4: Adding .js to app/js/index.js\n\n\n\n\n\n\n\n\n\nFigure 5: Adding .js to app/js/index.js ‘on click’"
  },
  {
    "objectID": "rhino.html#rap-dependencies",
    "href": "rhino.html#rap-dependencies",
    "title": "the rhino framework",
    "section": "rap dependencies",
    "text": "rap dependencies\nrhino uses box, which ‘completely replaces the base R library and require functions.’\nThe files for the rhino app are below:\n\n├── .Rbuildignore\n├── .Rhistory\n├── .Rprofile\n├── .Rproj.user\n├── .github\n│   └── workflows\n├── .lintr\n├── .renvignore\n├── .rscignore\n├── README.md\n├── app\n│   ├── js\n│   ├── logic\n│   ├── main.R\n│   ├── static\n│   ├── styles\n│   └── view\n├── app.R\n├── config.yml\n├── dependencies.R\n├── rap.Rproj\n├── renv\n│   ├── .gitignore\n│   ├── activate.R\n│   ├── library\n│   ├── settings.json\n│   └── staging\n├── renv.lock\n├── rhino.yml\n└── tests\n    ├── cypress\n    ├── cypress.json\n    └── testthat\n\nrhino apps aren’t packages, so the dependencies are stored in rap/dependencies.R\n\nreadLines(con = \"_apps/rap/dependencies.R\")\n#   [1] \"# This file allows packrat (used by rsconnect during deployment) to pick up dependencies.\"\n#   [2] \"library(rhino)\"                                                                           \n#   [3] \"library(ggplot2)\"                                                                         \n#   [4] \"library(shiny)\"                                                                           \n#   [5] \"library(rlang)\"                                                                           \n#   [6] \"library(shinythemes)\"                                                                     \n#   [7] \"library(bslib)\"                                                                           \n#   [8] \"\"                                                                                         \n#   [9] \"\"                                                                                         \n#  [10] \"\""
  },
  {
    "objectID": "rhino.html#use",
    "href": "rhino.html#use",
    "title": "the rhino framework",
    "section": "Use",
    "text": "Use\n\nTo run a rhino application, use rhino::app() in the app.R file.\nMost of the development takes place in app/logic and app/view (using box modules). The separation of the ‘business logic’ workflow from the ‘app view’ code is similar to the dev folder in golem and leprechaun, but the modules make it easy to move code and functions back and forth between the two folders.\nThe app/js/index.js and app/styles/main.css are used to include any custom CSS or JavaScript code, but you won’t create any new files (other than index.js and main.css).\n\nNew JavaScript or CSS code is placed in app/js/index.js or app/styles/main.css and then the corresponding rhino function is run (rhino::build_js() or rhino::build_sass()). This requires installing node.js.\nThese functions create output files in app/static/js/app.min.js and app/static/css/app.min.css that are used in the application.\n\ntests/ functions like any testthat folder (and can be used with shinytest2) and comes with a helper function, rhino::test_r()"
  },
  {
    "objectID": "leprechaun.html",
    "href": "leprechaun.html",
    "title": "The leprechaun framework",
    "section": "",
    "text": "leprechaun apps are built much like R packages (with devtools and usethis), but they are designed with the intention of being a ‘leaner and smaller’ version of golem:\n\n“it generates code and does not make itself a dependency of the application you build; this means applications are leaner, and smaller”"
  },
  {
    "objectID": "leprechaun.html#lap",
    "href": "leprechaun.html#lap",
    "title": "The leprechaun framework",
    "section": "",
    "text": "leprechaun apps are built much like R packages (with devtools and usethis), but they are designed with the intention of being a ‘leaner and smaller’ version of golem:\n\n“it generates code and does not make itself a dependency of the application you build; this means applications are leaner, and smaller”"
  },
  {
    "objectID": "leprechaun.html#start",
    "href": "leprechaun.html#start",
    "title": "The leprechaun framework",
    "section": "Start",
    "text": "Start\nCreate a leprechaun app just like you would a new R package:\n\nusethis::create_package(\"lap\")\n\n\n✔ Creating '../projects/lap/'\n✔ Setting active project to '/Users/mjfrigaard/projects/lap'\n✔ Creating 'R/'\n✔ Writing 'DESCRIPTION'\n✔ Writing 'NAMESPACE'\n✔ Writing 'lap.Rproj'\n✔ Adding '^lap\\\\.Rproj$' to '.Rbuildignore'\n✔ Adding '.Rproj.user' to '.gitignore'\n✔ Adding '^\\\\.Rproj\\\\.user$' to '.Rbuildignore'\n✔ Opening '/Users/mjfrigaard/projects/lap/' in new RStudio session\n\nAfter the new project opens, install and load the leprechaun package, then run leprechaun::scaffold():\n\ninstall.packages(\"leprechaun\")\nlibrary(leprechaun)\nleprechaun::scaffold()\n\n\n── Scaffolding leprechaun app ─────────────────────────────────────────\n\n── Creating lock file ──\n\n✔ Creating .leprechaun\n\n── Adding dependencies ──\n\n✔ Adding 'shiny' to Imports in DESCRIPTION\n✔ Adding 'bslib' to Imports in DESCRIPTION\n✔ Adding 'htmltools' to Imports in DESCRIPTION\n✔ Adding 'pkgload' to Suggests in DESCRIPTION\n\n\n── Generating code ──\n\n✔ Creating R/ui.R\n✔ Creating R/assets.R\n✔ Creating R/run.R\n✔ Creating R/server.R\n✔ Creating R/leprechaun-utils.R\n✔ Creating R/_disable_autoload.R\n✔ Creating R/zzz.R\n✔ Creating R/input-handlers.R\n\n✔ Creating inst/dev\n✔ Creating inst/assets\n✔ Creating inst/img\n✔ Creating inst/run/app.R\n\n── Ignoring files ──\n\n✔ Adding '^\\\\.leprechaun$' to '.Rbuildignore'\n\nThis results in the following folder tree:\n\nlap/\n  ├── DESCRIPTION\n  ├── NAMESPACE\n  ├── R/\n  │   ├── _disable_autoload.R\n  │   ├── assets.R\n  │   ├── input-handlers.R\n  │   ├── leprechaun-utils.R\n  │   ├── run.R\n  │   ├── server.R\n  │   ├── ui.R\n  │   └── zzz.R\n  ├── inst/\n  │   ├── assets/\n  │   ├── dev/\n  │   ├── img/\n  │   └── run/\n  │       └── app.R\n  └── lap.Rproj\n\n7 directories, 12 files\n\nThe standard R package files and folders (DESCRIPTION, NAMESPACE, R/, and lap.Rproj) are accompanied by multiple sub-folders in inst/ (recall that inst/ contents are available in the package when the package is installed).\n\nR/\nThe initial application files are created using leprechaun::scaffold(), which takes the following options as function arguments:\n\nui controls the application layout (can be \"fluidPage\" or \"navbarPage\", defaults to \"navbarPage\")\nbs_version Bootstrap version (“If shiny &gt; 1.6 is installed defaults to version 5, otherwise version 4” )\noverwrite: Overwrite all files?\n\n\n\n└── R/\n    ├── _disable_autoload.R\n    ├── assets.R\n    ├── input-handlers.R\n    ├── leprechaun-utils.R\n    ├── run.R\n    ├── server.R\n    ├── ui.R\n    └── zzz.R\n\n\n_disable_autoload.R disables Shiny’s loadSupport(). By default, Shiny will load “any top-level supporting .R files in the R/ directory adjacent to the app.R/server.R/ui.R files.”\nassets.R: contains the serveAssets() function, which will identify the modules using CSS or JavaScript and create dependencies, a list of metadata on the app\ninput-handlers.R: contains leprechaun_handler_df() and leprechaun_handler_list() for “converting the input received from the WebSocket to a data.frame/list”\n.onAttach() registers the two input handlers above\n\nregisterInputHandler(): “When called, Shiny will use the function provided to refine the data passed back from the client (after being deserialized by jsonlite) before making it available in the input variable of the server.R file”)\n\nleprechaun-utils.R initially contains the make_send_message() function (which is used in the R/server.R below)\nrun.R contains functions for running the production (run()) and development version of the application (run_dev()):\nserver.R by default creates send_message with make_send_message(session) (see R/leprechaun-utils.R above).\nui.R holds the ui() and assets() functions. assets() loads the resources called in the R/assets.R file (see serveAssets() function above).\nzzz.R contains .onLoad(), a wrapper for system.file() and Shiny’s addResourcePath() and function (used for adding images to the application in inst/img/).\n\n\n\ninst/\nThe inst/ folder contains the initial leprechaun scaffolding folders:\n\ninst/\n├── assets\n├── dev\n├── img\n└── run\n    └── app.R\n\n4 directories, 1 file\n\nassets, dev, and image will be demonstrated in the sections below. The inst/run/app.R contains calls to leprechaun::build() and pkgload::load_all() before running the app with run()\n\n# do not deploy from this file\n# see leprechaun::add_app_file()\nleprechaun::build()\n\npkgload::load_all(\n    path = \"../../\",\n    reset = TRUE,\n    helpers = FALSE\n)\n\nrun()\n\nThis file is not run directly (check leprechaun::add_app_file())"
  },
  {
    "objectID": "leprechaun.html#develop",
    "href": "leprechaun.html#develop",
    "title": "The leprechaun framework",
    "section": "Develop",
    "text": "Develop\nBuilding leprechaun apps is similar to developing an R package. New code is placed in the R/ folder, and application resources (CSS, SASS, JavaScript files) are added using one of the leprechaun::use_* functions:\n\nuse_sass()\nuse_html_utils()\n\nuse_endpoints_utils()\nuse_js_utils()\n\nMore assets can be added using the leprechaun::use_packer() function.\n\n\nThe leprechaun::scaffold() defaults to a navbarPage(), but I’ve switched to a fluidPage() for this example.\n\n\nadd_module()\nleprechaun has an add_module() helper function for creating modules:\n\nThe initial var_input module:\n\nleprechaun::add_module(\"var_input\")\n\n\nThis creates functions for the UI and server portions of the module.\n\n\n#' var_input UI\n#' \n#' @param id Unique id for module instance.\n#' \n#' @keywords internal\nvar_inputUI &lt;- function(id){\n    ns &lt;- NS(id)\n\n    tagList(\n        h2(\"var_input\"),\n\n    )\n}\n\n\nThe initial server module:\n\n\n#' var_input Server\n#' \n#' @param id Unique id for module instance.\n#' \n#' @keywords internal\nvar_input_server &lt;- function(id){\n    moduleServer(\n        id,\n        function(\n            input, \n            output, \n            session\n            ){\n\n                ns &lt;- session$ns\n                send_message &lt;- make_send_message(session)\n\n                # your code here\n        }\n    )\n}\n\n# UI\n# var_inputUI('id')\n\n# server\n# var_input_server('id')\n\n\nNote the send_message &lt;- make_send_message(session) in var_input_server(). We’ll cover how this is used in the JavaScript section below.\n\n\n\n\n\n\nTip: @keywords internal\n\n\n\n\n\n\nThe module contents are similar to golem, but instead of using the @noRd tag, these functions include @keywords internal (which can be used to document your package).\n\n\n\n\nThe code for the var_input and plot_display modules are below.\n\nThe R/module_var_input.R file: plot_dispay collects the data from var_input and creates the plot with the custom scatter_plot() function:\n\n\nvar_inputUI &lt;- function(id) {\n  ns &lt;- NS(id)\n  tagList(\n    selectInput(\n      inputId = ns(\"y\"),\n      label = \"Y-axis:\",\n      choices = c(\n        \"IMDB rating\" = \"imdb_rating\",\n        \"IMDB number of votes\" = \"imdb_num_votes\",\n        \"Critics Score\" = \"critics_score\",\n        \"Audience Score\" = \"audience_score\",\n        \"Runtime\" = \"runtime\"\n      ),\n      selected = \"audience_score\"\n    ),\n    selectInput(\n      inputId = ns(\"x\"),\n      label = \"X-axis:\",\n      choices = c(\n        \"IMDB rating\" = \"imdb_rating\",\n        \"IMDB number of votes\" = \"imdb_num_votes\",\n        \"Critics Score\" = \"critics_score\",\n        \"Audience Score\" = \"audience_score\",\n        \"Runtime\" = \"runtime\"\n      ),\n      selected = \"imdb_rating\"\n    ),\n    selectInput(\n      inputId = ns(\"z\"),\n      label = \"Color by:\",\n      choices = c(\n        \"Title Type\" = \"title_type\",\n        \"Genre\" = \"genre\",\n        \"MPAA Rating\" = \"mpaa_rating\",\n        \"Critics Rating\" = \"critics_rating\",\n        \"Audience Rating\" = \"audience_rating\"\n      ),\n      selected = \"mpaa_rating\"\n    ),\n    sliderInput(\n      inputId = ns(\"alpha\"),\n      label = \"Alpha:\",\n      min = 0, max = 1, step = 0.1,\n      value = 0.5\n    ),\n    sliderInput(\n      inputId = ns(\"size\"),\n      label = \"Size:\",\n      min = 0, max = 5,\n      value = 2\n    ),\n    textInput(\n      inputId = ns(\"plot_title\"),\n      label = \"Plot title\",\n      placeholder = \"Enter plot title\"\n    )\n  )\n}\n\nvar_input_server &lt;- function(id) {\n  moduleServer(id, function(input, output, session) {\n      ns &lt;- session$ns\n      send_message &lt;- make_send_message(session)\n\n      # your code here\n      return(\n        reactive({\n          list(\n            \"y\" = input$y,\n            \"x\" = input$x,\n            \"z\" = input$z,\n            \"alpha\" = input$alpha,\n            \"size\" = input$size,\n            \"plot_title\" = input$plot_title\n          )\n        })\n      )\n    }\n  )\n}\n\n\nThe R/module_plot_display.R file\n\n\nplot_displayUI &lt;- function(id) {\n  ns &lt;- NS(id)\n  tagList(\n    tags$br(),\n    tags$blockquote(\n      tags$em(\n        tags$h6(\n          \"The code for this application comes from the \",\n          tags$a(\"Building web applications with Shiny\",\n            href = \"https://rstudio-education.github.io/shiny-course/\"\n          ),\n          \"tutorial\"\n        )\n      )\n    ),\n    plotOutput(outputId = ns(\"scatterplot\"))\n  )\n}\nplot_display_server &lt;- function(id, var_inputs) {\n  moduleServer(id, function(input, output, session) {\n\n      ns &lt;- session$ns\n      send_message &lt;- make_send_message(session)\n\n      inputs &lt;- reactive({\n        plot_title &lt;- tools::toTitleCase(var_inputs()$plot_title)\n        list(\n          x = var_inputs()$x,\n          y = var_inputs()$y,\n          z = var_inputs()$z,\n          alpha = var_inputs()$alpha,\n          size = var_inputs()$size,\n          plot_title = plot_title\n        )\n      })\n      output$scatterplot &lt;- renderPlot({\n        plot &lt;- scatter_plot(\n          # data --------------------\n          df = movies,\n          x_var = inputs()$x,\n          y_var = inputs()$y,\n          col_var = inputs()$z,\n          alpha_var = inputs()$alpha,\n          size_var = inputs()$size\n        )\n        plot +\n          ggplot2::labs(\n            title = inputs()$plot_title,\n            x = stringr::str_replace_all(\n                  tools::toTitleCase(inputs()$x), \"_\", \" \"),\n            y = stringr::str_replace_all(\n                  tools::toTitleCase(inputs()$y), \"_\", \" \")) +\n          ggplot2::theme_minimal() +\n          ggplot2::theme(legend.position = \"bottom\")\n      })\n    }\n  )\n}\n\nAfter creating the modules, adding them to the UI (R/ui.R) and server (R/server.R) is straightforward.\n\nThe R/ui.R file: the UI includes the bs_theme() function (with version set to 5).\n\n\n#' Shiny UI\n#'\n#' Core UI of package.\n#'\n#' @param req The request object.\n#'\n#' @import shiny\n#' @importFrom bslib bs_theme\n#'\n#' @keywords internal\nui &lt;- function(req) {\n  fluidPage(\n    theme = bs_theme(version = 5),\n    assets(),\n    h1(\"lap\"),\n    # Begin new code --&gt;\n    shiny::sidebarLayout(\n      shiny::sidebarPanel(\n        var_inputUI(\"vars\")\n      ),\n      shiny::mainPanel(\n        plot_displayUI(\"plot\")\n      )\n    )\n    ## End new code &lt;--\n  )\n}\n\n\nThe R/server.R file: The server also has the make_send_message() function in it by default (more on that below).\n\n\n#' Server\n#'\n#' Core server function.\n#'\n#' @param input,output Input and output list objects\n#' containing said registered inputs and outputs.\n#' @param session Shiny session.\n#'\n#' @noRd\n#' @keywords internal\nserver &lt;- function(input, output, session){\n\n    send_message &lt;- make_send_message(session)\n\n  ## New code --&gt;\n   selected_vars &lt;- var_input_server(\"vars\")\n\n   plot_display_server(\"plot\", var_inputs = selected_vars)\n   ## New code &lt;--\n\n}\n\nThe other components of lap were created using the standard usethis package development functions.\n\n\nAdd data\n\nmovies.RData was added to inst/extdata and loaded into the package with usethis::use_data_raw()\n\n\n\n\n\n\n\nAdding data to a package\n\n\n\n\n\n\nAfter calling usethis::use_data_raw('movies'), I can use system.file() to locate the file with the following code in data-raw/movies.R:\n## code to prepare `movies` dataset goes here\npth &lt;- system.file('extdata/movies.RData', package = 'lap')\nload(pth)\nusethis::use_data(movies, overwrite = TRUE)\n\n\n\n\n\n\nAdd utility function\n\nusethis::use_r() created R/utils_plot_display.R to hold the scatter_plot() function\n::: {.cell}\nscatter_plot &lt;- function(df, x_var, y_var, col_var, alpha_var, size_var) {\n    ggplot2::ggplot(data = df,\n      ggplot2::aes(x = .data[[x_var]],\n          y = .data[[y_var]],\n          color = .data[[col_var]])) +\n      ggplot2::geom_point(alpha = alpha_var, size = size_var)\n\n}\n:::\n\nNow I can run devtools::load_all(), devtools::document(), restart and load the package, then run()\n\n\n\n\n\n\n\nFigure 1: run lap"
  },
  {
    "objectID": "leprechaun.html#adding-features",
    "href": "leprechaun.html#adding-features",
    "title": "The leprechaun framework",
    "section": "Adding features",
    "text": "Adding features\nleprechaun stores external code files the inst/ folder (similar to the golem framework), but uses a combination of use_* and build() functions to add functionality to you app.\n\nUse packer\nI’ll demonstrate how make_send_message() function works by walking through the JavaScript example from the package website.\n\nFirst we have to build the scaffolding for packer by running packer::scaffold_leprechaun()\n\n\npacker::scaffold_leprechaun()\n\n\n── Scaffolding leprechaun ──────────────────────────────────────\n✔ Initialiased npm\n✔ webpack, webpack-cli, webpack-merge installed with scope \"dev\" \n✔ Added npm scripts\n✔ Created srcjs directory\n✔ Created srcjs/config directory\n✔ Created webpack config files\n\n── Adding files to .gitignore and .Rbuildignore ──\n\n✔ Setting active project to '/projects/apps/sfw/_apps/lap'\n✔ Adding '^srcjs$' to '.Rbuildignore'\n✔ Adding '^node_modules$' to '.Rbuildignore'\n✔ Adding '^package\\\\.json$' to '.Rbuildignore'\n✔ Adding '^package-lock\\\\.json$' to '.Rbuildignore'\n✔ Adding '^webpack\\\\.dev\\\\.js$' to '.Rbuildignore'\n✔ Adding '^webpack\\\\.prod\\\\.js$' to '.Rbuildignore'\n✔ Adding '^webpack\\\\.common\\\\.js$' to '.Rbuildignore'\n✔ Adding 'node_modules' to '.gitignore'\n\n── Scaffold built ──\n\nℹ Run `bundle` to build the JavaScript files\nℹ Run `leprechaun::use_packer()`\n\n\nNow that the scaffolding is in place, run leprechaun::use_packer():\n\n\nleprechaun::use_packer()\n\n\n✔ Creating inst/dev/packer.R\n✔ Adding 'packer' to Suggests in DESCRIPTION\n! This requires `leprechaun::build()` or the `leprechaun::build_roclet`\n\n\nThe final step is to build or ‘bundle’ the JavaScript files with leprechaun::build()\n\n\nleprechaun::build()\n\n\n✔ Running packer.R\n✔ Bundled       \n\nNow I can see what new files have been added to the package/app.\n\nIn the inst/dev/ folder:\n\nI can see the packer.R file has been added, which calls packer::bundle()\n\n\ninst/dev/\n      └── packer.R\n\n1 directory, 1 file\n\nIn the srcjs/ folder, the modules/message.js and index.js create the alert with Shiny.addCustomMessageHandler\n\nsrcjs/\n    ├── config\n    │   ├── entry_points.json\n    │   ├── externals.json\n    │   ├── loaders.json\n    │   ├── misc.json\n    │   └── output_path.json\n    ├── index.js\n    └── modules\n        └── message.js\n\n// srcjs/modules/message.js\nexport const message = (msg) =&gt; {\n  alert(msg);\n}\n// srcjs/index.js\nimport { message } from './modules/message.js';\nimport 'shiny';\n\n// In shiny server use:\n// session$sendCustomMessage('show-packer', 'hello packer!')\nShiny.addCustomMessageHandler('show-packer', (msg) =&gt; {\n  message(msg.text);\n})\n\nTo use the JS message scripts in srcjs/, I add the following to R/server.R:\n\nIn R/server.R\n\n\n    send_message &lt;- make_send_message(session)\n    send_message(\"show-packer\",\n                  text = \"this message is from your R/server.R file\")\n\nAfter running devtools::load_all() and devtools::document(), the application loads with an alert:\n\n\n\n\n\n(a) send_message() from R/server.R\n\n\nFigure 2: send_message()\n\n\nWe can also include messages from modules.\n\nIn R/module_plot_display.R\n\n\nsend_message &lt;- make_send_message(session)\nsend_message(\"show-packer\",\n  text = \"this is a message from your plot_display module\")\n\nRead more about sending JavaScript messages here on the shiny website.\n\n\nAdd images\nI’ll demonstrate how to use the inst/ folder by adding an image to the application.\n\nAssume I want to add leprechaun.jpg to my UI. I start by adding the file to inst/img/:\n\ninst/\n  └── img/\n       └── leprechaun.jpg &lt;- new image file!\n\nThen I add the img/ path to the code to UI:\n\ntags$img(\n  src = \"img/leprechaun.jpg\",\n  height=\"25%\",\n  width=\"25%\")\n\n\nOnce again, run devtools::load_all() and devtools::document(), restarting and loading the package, then run the application with run()\n\n\n\n\n\n(a)\n\n\nFigure 3: Adding images to inst/img/\n\n\n\n\nUse Sass\nWe can add Sass styling to our leprechaun app using the use_sass() helper function (this Sass example is from the package website).\n\nRun leprechaun::use_sass():\n\n\nleprechaun::use_sass()\n\n\nThis will add files to assets/ and dev/ and we see the following messages:\n\n\n✔ Creating scss\n✔ Creating inst/dev/sass.R\n✔ Adding 'sass' to Suggests in DESCRIPTION\n✔ Adding '^scss$' to '.Rbuildignore'\n! This requires `leprechaun::build()` or the `leprechaun::build_roclet`\n\n\nBelow are the new files in scss/:\n\n\nscss\n├── _core.scss\n└── main.scss\n\n1 directory, 2 files\n\nThe scss/ folder created by leprechaun::use_sass() includes _core.scss and main.scss.\n\n_core.scss: the original file is below\n\n\nhtml{\n    .error {\n        color: red\n    }\n}\n\n\nWe’ll change the color: from red to green (#38B44A) using $accent: #38B44A;\n\n\n$accent: #38B44A;\n\nhtml{\n    h1 {\n        color: $accent;\n    }\n}\n\n\nThen run leprechaun::build()\n\n\nleprechaun::build()\n\n\n✔ Running packer.R\n✔ Bundled       \n✔ Running sass.R\n\n\nThe inst/dev/sass.R file contains a sass_build() function\n\nsass_build() looks in the scss/ folder for main.scss and creates the inst/assets/style.min.css file.\n\n\n#' Build CSS\n#'\n#' Build the sass\nsass_build &lt;- function() {\n  has_sass &lt;- requireNamespace(\"sass\", quietly = TRUE)\n\n  if (!has_sass) {\n    warning(\n      \"Requires `sass` package: `install.packages('sass')`\\n\",\n      \"Skipping.\",\n      call. = FALSE\n    )\n    return()\n  }\n\n  output &lt;- sass::sass(\n    sass::sass_file(\n      \"scss/main.scss\"\n    ),\n    cache = NULL,\n    options = sass::sass_options(\n      output_style = \"compressed\"\n    ),\n    output = \"inst/assets/style.min.css\"\n  )\n  invisible(output)\n}\n\nsass_build()\n\n\nOnce again, I run devtools::load_all(), devtools::document(), install and restart, then load the package and run()\n\n\n\n\n\n(a)\n\n\nFigure 4: run lap with new Sass"
  },
  {
    "objectID": "leprechaun.html#leprechaunbuild",
    "href": "leprechaun.html#leprechaunbuild",
    "title": "The leprechaun framework",
    "section": "leprechaun::build()",
    "text": "leprechaun::build()\nThe assets/ folder contains the files generated by the .R scripts in the dev/ folder.\n\n“Do not call this function from within the app. It helps build things, not run them.” - build.md guide\n\n\nContents of inst/assets/:\n\ninst/assets/\n        ├── index.js\n        └── style.min.css\n\n1 directory, 2 files\n\nContents of inst/dev/:\n\ninst/dev/\n      ├── packer.R\n      └── sass.R\n\n1 directory, 2 files\n\ninst/dev/sass.R creates inst/assets/style.min.css and inst/dev/packer.R creates inst/assets/index.js\n\n\nserveAssets()\nAfter running leprechaun::use_sass() and leprechaun::build(), we’ll check the serveAssets() function:\n\nlap:::serveAssets()\n\n\n[[1]]\nList of 10\n $ name      : chr \"lap\"\n $ version   : chr \"0.0.0.9000\"\n $ src       :List of 1\n  ..$ file: chr \".\"\n $ meta      : NULL\n $ script    : Named chr \"assets/index.js\"\n  ..- attr(*, \"names\")= chr \"file\"\n $ stylesheet: Named chr [1:2] \"assets/style.min.css\" \"html/R.css\"\n  ..- attr(*, \"names\")= chr [1:2] \"file\" \"file\"\n $ head      : NULL\n $ attachment: NULL\n $ package   : chr \"lap\"\n $ all_files : logi TRUE\n - attr(*, \"class\")= chr \"html_dependency\"\n\nThis shows me stylesheet has been updated with \"assets/style.min.css\" and script has been updated with \"assets/index.js\" (these files are loaded into the application when it runs)."
  },
  {
    "objectID": "leprechaun.html#configure",
    "href": "leprechaun.html#configure",
    "title": "The leprechaun framework",
    "section": "Configure",
    "text": "Configure\nleprechaun app configuration files use the config package (similar to golem). leprechaun doesn’t assume I’ll be using a config.yml file, but I can easily add one with leprechaun::use_config().\n\nuse_config() adds a inst/config.yml and R/config.R\nThe default value in the config.yml files is production: true, which can be read using config_read() in R/config.R.\n\nconfig_read()\n\n\n$production\n[1] TRUE\n\n\nValues can be added to inst/config.yml using the config file format, then the CONFIG_FILE can be set as an environmental variable"
  },
  {
    "objectID": "leprechaun.html#lap-dependencies",
    "href": "leprechaun.html#lap-dependencies",
    "title": "The leprechaun framework",
    "section": "lap dependencies",
    "text": "lap dependencies\n\n\n\n\n\n\nWhat does ‘leaner and smaller’ mean?\n\n\n\n\n\n\nleprechaun doesn’t add itself as a dependency (i.e., no need to add leprechaun to the list of Imports in the DESCRIPTION or NAMESPACE).\nThe section titled, ‘the golem in the room’ on the package website is worth reading because it covers the differences between the two packages (and why you might choose one over the other).\n\n\n\n\nThe final folder tree for lap (a leprechaun app-package) are below:\n\n├── DESCRIPTION\n├── NAMESPACE\n├── R\n│   ├── _disable_autoload.R\n│   ├── assets.R\n│   ├── input-handlers.R\n│   ├── leprechaun-utils.R\n│   ├── module_plot_display.R\n│   ├── module_var_input.R\n│   ├── run.R\n│   ├── server.R\n│   ├── ui.R\n│   ├── utils_scatter_plot.R\n│   └── zzz.R\n├── app.R\n├── data\n│   └── movies.rda\n├── data-raw\n│   └── movies.R\n├── inst\n│   ├── assets\n│   │   ├── index.js\n│   │   └── style.min.css\n│   ├── dev\n│   │   ├── packer.R\n│   │   └── sass.R\n│   ├── extdata\n│   │   └── movies.RData\n│   ├── img\n│   │   └── leprechaun.jpg\n│   └── run\n│       └── app.R\n├── lap.Rproj\n├── man\n│   ├── assets.Rd\n│   ├── js-modules.Rd\n│   ├── leprechaun_handler_df.Rd\n│   ├── leprechaun_handler_list.Rd\n│   ├── plot_displayUI.Rd\n│   ├── plot_display_server.Rd\n│   ├── run.Rd\n│   ├── scatter_plot.Rd\n│   ├── serveAssets.Rd\n│   ├── ui.Rd\n│   ├── var_inputUI.Rd\n│   └── var_input_server.Rd\n└── tests\n\n12 directories, 36 files\n\nlap depends on shiny, but not leprechaun.\n\npak::local_dev_deps_explain(\n  deps = \"shiny\", \n  root = \"_apps/lap\")\n\n lap -&gt; shiny\n\n\npak::local_dev_deps_explain(\n  deps = \"leprechaun\", \n  root = \"_apps/lap\")\n\n x leprechaun\n\nHowever, adding functionality and features with the use_* functions can add dependencies to your leprechaun app:\n\npak::local_dev_deps_explain(\n  deps = \"sass\", \n  root = \"_apps/lap\")\n\n lap -&gt; bslib -&gt; sass\n\n lap -&gt; shiny -&gt; bslib -&gt; sass\n\n lap -&gt; packer -&gt; htmlwidgets -&gt; rmarkdown -&gt;\n\n   bslib -&gt; sass\n\n lap -&gt; sass\n\n\nleprechaun apps are packages, so the inst/ folders are available to the application at runtime (which I can find using system.file()).\n\nBelow I’ve passed the output from system.file(\".\", package = \"lap\") to fs::dir_tree() to view it’s contents:\n\n\n├── DESCRIPTION\n├── INDEX\n├── Meta/\n│   ├── Rd.rds\n│   ├── data.rds\n│   ├── features.rds\n│   ├── hsearch.rds\n│   ├── links.rds\n│   ├── nsInfo.rds\n│   └── package.rds\n├── NAMESPACE\n├── R/\n│   ├── lap\n│   ├── lap.rdb\n│   └── lap.rdx\n├── assets/\n│   ├── index.js\n│   └── style.min.css\n├── data/\n│   ├── Rdata.rdb\n│   ├── Rdata.rds\n│   └── Rdata.rdx\n├── dev/\n│   ├── packer.R\n│   └── sass.R\n├── extdata/\n│   └── movies.RData\n├── help/\n│   ├── AnIndex\n│   ├── aliases.rds\n│   ├── lap.rdb\n│   ├── lap.rdx\n│   └── paths.rds\n├── html/\n│   ├── 00Index.html\n│   └── R.css\n├── img/\n│   └── leprechaun.jpg\n└── run/\n    └── app.R\n\n\nI can see the inst/ folders and files I’ve created are available to lap at runtime"
  },
  {
    "objectID": "leprechaun.html#recap",
    "href": "leprechaun.html#recap",
    "title": "The leprechaun framework",
    "section": "Recap",
    "text": "Recap\nleprechaun delivers on its promise to be a ‘leaner and smaller’ version of golem. Most of the features in golem are also accessible in leprechaun. Multiple inst/ sub-folders makes adding assets to the application easier, and leprechaun has a long list of use_* functions for including Sass, CSS, HTML, and JavaScript. The package website has examples for getting started and adding multiple resources, but unfortunately the function reference had limited documentation.\nleprechaun doesn’t come with any testing functions, although this can be done using testthat and shinytest2 (just as we would with a standard R package)."
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Shiny Frameworks",
    "section": "",
    "text": "This website is a resource for developers who are curious about the relative pros and cons of using a Shiny framework to build their apps.\nThis repo contains the following shiny applications:\n\ngap: a golem app-package\nlap: a leprechaun app-package\nrap: a rhino app (pseudo-package)1"
  },
  {
    "objectID": "index.html#footnotes",
    "href": "index.html#footnotes",
    "title": "Shiny Frameworks",
    "section": "Footnotes",
    "text": "Footnotes\n\n\nrhino apps aren’t R packages–they’re dependencies are managed with a dependencies.R file and box modules.↩︎\nThis was a popular course among colleagues and covers (in my opinion) what a developer should know before considering a framework.↩︎"
  }
]
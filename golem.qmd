---
title: "The `golem` framework"
knitr:
  opts_chunk: 
    collapse: true
    comment: "\t"
---

## `gap`

```{r}
#| eval: true
#| echo: true 
fs::dir_tree("_apps/gap", recurse = 0)
```

The `golem` is an 'opinionated' Shiny framework that provides many options for users who are experienced with package development, but who are looking to streamline application development.

## `golem` package dependencies 

```{r}
#| eval: true
#| echo: true 
#| message: false 
#| warning: false
#| code-summary: 'show/hide golem dependency tree'
library(golem)
pak::pkg_deps_tree(pkg = "golem", dependencies = TRUE)
```

### `gap` package files 

#### NAMESPACE

Below is the namespace file for `gap`.

```{verbatim}
#| eval: false
#| echo: true 
#| cocode-fold: false
# Generated by roxygen2: do not edit by hand

export(run_app)
import(shiny)
importFrom(rlang,.data)
```

As you can see, I'm only exporting the `run_app()` function from `gap`. 

#### Imports

The `Imports` field in the `DESCRIPTION` file lists the following: 

```{verbatim}
#| eval: false
#| echo: true 
#| code-fold: false
Imports: 
    config (>= 0.3.1),
    ggplot2,
    golem (>= 0.3.5),
    rlang,
    shiny (>= 1.7.4),
    stringr,
    tools
```

The graph in the application uses `ggplot2`, `rlang`, and `tools`. `golem` is importing `config` (and itself).

The `pak::local_deps_tree()` function can tell us what the dependencies look like for an application built with `golem`:

```{r}
#| eval: true
#| code-fold: true 
#| code-summary: 'show/hide gap dependency tree'
#| collapse: true 
#| comment: "\t"
pak::local_deps_tree(root = "_apps/gap", dependencies = NA)
```

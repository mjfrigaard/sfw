---
title: "The `leprechaun` framework"
knitr:
  opts_chunk: 
    collapse: true
    comment: ""
    
execute:
  echo: true
  warning: false
  eval: false
---

```{r}
#| label: utils
#| eval: true 
#| echo: false 
#| include: false
source("_common.R")
```

[`leprechaun`](https://leprechaun.opifex.org/#/) apps are built much like standard R packages (built with `devtools` and `usethis`), but they're designed with the intention of being a 'leaner and smaller' version of [`golem`](https://thinkr-open.github.io/golem/):[^view-lap]

> *"it generates code and does not make itself a dependency of the application you build; this means applications are leaner, and smaller"*


## Package versions

The versions of `leprechaun` and `packer` used in this example are below:

```{r}
#| echo: false
#| eval: true
knitr::kable(
  pkg_info(pkgs = c("leprechaun","packer"))
)
```


[^view-lap]: Download the code used to build the `leprechaun` app [here](https://github.com/mjfrigaard/sfw/raw/main/_apps/lap.tar.gz)

```{r}
#| label: co_box_dev_env
#| eval: false 
#| results: asis
#| echo: false
co_box(color = "r",
  header = "IMPORTANT: Development Environment",
  contents = "

This page covers developing a new `leprechaun` application using Positron ![](img/positron.png){height=30}, the new IDE from Posit. The current version information is below: 

\`\`\`sh
Positron Version: 2025.03.0 (Universal) build 116
Code - OSS Version: 1.96.0
Commit: 7f0f93873e8b24c9f393bb3586724f4783c5e72c
Date: 2025-03-01T18:51:44.014Z
Electron: 32.2.6
Chromium: 128.0.6613.186
Node.js: 20.18.1
V8: 12.8.374.38-electron.0
OS: Darwin x64 24.3.0
\`\`\`

")
```


## Getting started

Create a `leprechaun` app just like you would a new R package (install `devtools`, which includes `usethis` as a dependency):

```{r}
#| label: devtools
#| code-fold: false
#| eval: false
install.packages('devtools')
library(devtools)
```

```{verbatim}
Loading required package: usethis
```

Create a new package:

```{r}
#| label: create_package-lap
#| code-fold: false
#| eval: false
usethis::create_package("lap")
```

```{bash}
#| label: create_package-lap-output
#| code-fold: false
✔ Creating '../projects/lap/'
✔ Setting active project to '/Users/mjfrigaard/projects/lap'
✔ Creating 'R/'
✔ Writing 'DESCRIPTION'
✔ Writing 'NAMESPACE'
✔ Writing 'lap.Rproj'
✔ Adding '^lap\\.Rproj$' to '.Rbuildignore'
✔ Adding '.Rproj.user' to '.gitignore'
✔ Adding '^\\.Rproj\\.user$' to '.Rbuildignore'
✔ Opening '/Users/mjfrigaard/projects/lap/' in new RStudio session
```

After the new project opens, install and load the `leprechaun` package, then run `leprechaun::scaffold()`:[^leprechaun-scaffold]

[^leprechaun-scaffold]: The [`leprechaun::scaffold()`](https://leprechaun.opifex.org/#/reference/scaffold) defaults to a `navbarPage()`, but you can switch to a `fluidPage()` or change the Bootstrap version ("*If shiny \> 1.6 is installed defaults to version 5, otherwise version 4"* ). 

```{r}
#| label: install.packages-scaffold
#| code-fold: false
install.packages("leprechaun")
leprechaun::scaffold()
```

## Package files 

`leprechaun::scaffold()` results in the following folder tree:

```{bash}
#| code-fold: false
#| eval: false
├── DESCRIPTION
├── NAMESPACE
├── R/
│   ├── _disable_autoload.R
│   ├── assets.R
│   ├── hello.R
│   ├── input-handlers.R
│   ├── leprechaun-utils.R
│   ├── run.R
│   ├── server.R
│   ├── ui.R
│   └── zzz.R
├── inst/
│   ├── assets
│   ├── dev
│   ├── img
│   └── run
│       └── app.R
├── lap.Rproj
└── man
    └── hello.Rd

8 directories, 14 files
```

The standard R package files and folders (`DESCRIPTION`, `NAMESPACE`, `R/`, etc.) are accompanied by multiple sub-folders in `inst/` (recall that `inst/` contents are available in the package when the package is installed).[^remove-initial-pkg-files]

[^remove-initial-pkg-files]: We can remove `R/hello.R` and `man/hello.Rd` files. These are just examples from `usethis::create_package()`.

## Getting Started

The following files are part of our initial application created with [`leprechaun::scaffold()`](https://leprechaun.opifex.org/#/reference/scaffold).

:::{layout="[30,70]" layout-valign="top"}

**.leprechaun**


The `.leprechaun` lock file contains the package name, version, as well as versions of bootstrap and accompanying R files.

:::


:::{layout="[30,70]" layout-valign="top"}

**DESCRIPTION**

- `shiny`, `bslib`, `htmltools` and `pkgload` will automatically be added to the `DESCRIPTION` file

    - The remaining `DESCRIPTION` fields need to be entered manually (or with the [`desc` package](https://desc.r-lib.org/)). See example below:

:::

```{verbatim}
Package: lap
Title: leprechaun app-package 
Version: 0.0.0.9000
Author: John Smith <John.Smith@email.io> [aut, cre]
Maintainer: John Smith <John.Smith@email.io>
Description: A movie-review leprechaun shiny application.
License: GPL-3
Encoding: UTF-8
Roxygen: list(markdown = TRUE)
LazyData: true
Imports: 
    bslib,
    htmltools,
    shiny
Suggests: 
    pkgload

```

:::{.column-margin}

Leave an empty final line in the `DESCRIPTION` file.

:::


As promised, `leprechaun` app-packages can be spun up quickly with minimal commands. After loading and documenting `lap`, we can use the standalone app function `run()` to launch the app in Positron ![](img/positron.png){height=30}

![Initial leprechaun app](img/lap_initial_app.png){width='100%' fig-align='center'}

## Development

The development workflow for a `leprechaun` application is similar to developing any app-package: 

1. `usethis` functions can be used to add R files, tests, vignettes, README.md/NEWS.md files, etc.

2. use `devtools` to load, document, and install.

### [Application code]{style="font-weight: bold; font-size: 1.02em;"}

Before we create any new files, we’re going to dive into the code that’s included in a new `leprechaun` app-package. Most of these files are in the `R/` folder, but we can also new subfolders in `inst/`.

:::{layout="[50,50]" layout-valign="top"}

```sh
└── R/
    ├── _disable_autoload.R
    ├── assets.R
    ├── input-handlers.R
    ├── leprechaun-utils.R
    ├── run.R
    ├── server.R
    ├── ui.R
    └── zzz.R
```

```sh
└── inst/
    ├── assets
    ├── dev
    ├── img
    └── run
        └── app.R
```

:::


#### UI and Server

`ui.R` holds the `ui()` and `assets()` functions, and `server.R` includes the core application `server()` function. 

:::{layout="[50,50]" layout-valign="top"}

**App UI**

```r
#' Shiny UI
#' 
#' Core UI of package.
#' 
#' @param req The request object.
#' 
#' @import shiny
#' @importFrom bslib bs_theme
#' 
#' @keywords internal
ui <- function(req){
	navbarPage(
		theme = bs_theme(version = 4),
		header = list(assets()),
		title = "lap",
		id = "main-menu",
		tabPanel(
			"First tab",
			shiny::h1("First tab")
		),
		tabPanel(
			"Second tab",
			shiny::h1("Second tab")
		)
	)
}
```

:::

:::{layout="[50,50]" layout-valign="top"}

**`assets()`** loads the resources called in the `R/assets.R` file.

```r
#' Assets
#' 
#' Includes all assets.
#' This is a convenience function that wraps
#' [serveAssets] and allows easily adding additional
#' remote dependencies (e.g.: CDN) should there be any.
#' 
#' @importFrom shiny tags
#' 
#' @keywords internal
assets <- function(){
	list(
		serveAssets(), # base assets (assets.R)
		tags$head(
			# Place any additional depdendencies here
			# e.g.: CDN
		)	
	)
}
```

:::

:::{layout="[50,50]" layout-valign="top"}

`server()` also includes `make_send_message(session)` from `R/leprechaun-utils.R`.

```r
#' Server
#' 
#' Core server function.
#' 
#' @param input,output Input and output list objects
#' containing said registered inputs and outputs.
#' @param session Shiny session.
#' 
#' @noRd 
#' @keywords internal
server <- function(input, output, session){
	send_message <- make_send_message(session)	
}
```

:::

#### Assets 

The `R/assets.R` functions handle how JavaScript and CSS files are loaded and served to the browser.

:::{layout="[30,70]" layout-valign="top"}

**`serveAssets()`** 

Scans and sorts JavaScript/CSS files and bundles everything as proper HTML dependencies that Shiny can use.

:::

:::{layout="[30,70]" layout-valign="top"}

**`remove_modules()`** 

Filters out the module files from the list of all JavaScript files.

:::

:::{layout="[30,70]" layout-valign="top"}

**`get_modules()`** 

Extracts only the module files from the list of all JavaScript files.

:::

:::{layout="[30,70]" layout-valign="top"}

**`collapse_files()`** 

Creates a regular expression pattern to match specific files.

:::

Expand the code chunks below to view the functions in `R/assets.R`.

```{r}
#| eval: false 
#| code-fold: true 
#| code-summary: 'show/hide serveAssets()'
#' Dependencies
#'
#' @param modules JavaScript files names that require
#' the `type = module`.
#' @importFrom htmltools htmlDependency
#'
#' @keywords internal
serveAssets <- function(modules = NULL) {
  # JavaScript files
  javascript <- list.files(
    system.file(package = "lap"),
    recursive = TRUE,
    pattern = ".js$"
  )

  modules <- get_modules(javascript, modules)
  javascript <- remove_modules(javascript, modules)

  # CSS files
  css <- list.files(
    system.file(package = "lap"),
    recursive = TRUE,
    pattern = ".css$"
  )

  # so dependency processes correctly
  names(css) <- rep("file", length(css))
  names(javascript) <- rep("file", length(javascript))

  # serve dependencies
  dependencies <- list()

  standard <- htmlDependency(
    "lap",
    version = utils::packageVersion("lap"),
    package = "lap",
    src = ".",
    script = javascript,
    stylesheet = css
  )
  dependencies <- append(dependencies, list(standard))

  if (!is.null(modules)) {
    modules <- htmlDependency(
      "lap-modules",
      version = utils::packageVersion("lap"),
      package = "lap",
      src = ".",
      script = modules,
      meta = list(type = "module")
    )
    dependencies <- append(dependencies, list(modules))
  }

  return(dependencies)
}
```

```{r}
#| eval: false 
#| code-fold: true 
#| code-summary: 'show/hide remove_modules()'
#' Module
#'
#' Retrieve and add modules from a vector of files.
#'
#' @param files JavaScript files
#' @param modules JavaScript files names that require
#' the `type = module`.
#' @importFrom htmltools htmlDependency
#'
#' @keywords internal
#' @name js-modules
remove_modules <- function(files, modules) {
  if (is.null(modules)) {
    return(files)
  }

  # make pattern
  pattern <- collapse_files(modules)

  # remove modules
  files[!grepl(pattern, files)]
}
```

```{r}
#| eval: false 
#| code-fold: true 
#| code-summary: 'show/hide get_modules()'
#' @rdname js-modules
#' @keywords internal
get_modules <- function(files, modules) {
  if (is.null(modules)) {
    return(NULL)
  }

  # make pattern
  pattern <- collapse_files(modules)

  # remove modules
  files[grepl(pattern, files)]
}
```

```{r}
#| eval: false 
#| code-fold: true 
#| code-summary: 'show/hide collapse_files()'
# collapse files into a pattern
collapse_files <- function(files) {
  pattern <- paste0(files, collapse = "$|")
  paste0(pattern, "$")
}

```


#### Standalone app function 

`R/run.R` contains functions to launch our Shiny application in different modes.

:::{layout="[50,50]" layout-valign="top"}

**`run()`** is the main function that users will call to launch our application in normal mode (production-ready).

```r
run <- function(...){
    shinyApp(
        ui = ui,
        server = server,
        ...
    )
}
```

:::

:::{layout="[50,50]" layout-valign="top"}

**`run_dev()`** is for development purposes and launches a development version of our app (with local assets, etc.).

```r
run_dev <- function(){
    file <- system.file(
              "run/app.R", 
              package = "lap"
              )
    shiny::shinyAppFile(file)
}
```

:::

#### External resources 

The `inst/` folder contains the initial `leprechaun` scaffolding folders (`assets`, `dev`, `img`, and `run`) and a single `inst/run/app.R` file.[^git-keep] 

[^git-keep]: `assets`, `dev`, and `img` will initially contain `.gitkeep` files (a convention used by developers to force Git to include an otherwise empty directory in a repository). 

:::{layout="[30,70]" layout-valign="top"}

**`inst/assets`**

This folder is for storing front-end resources like JavaScript and CSS files (are automatically discovered by the `serveAssets()` function).

:::

:::{layout="[30,70]" layout-valign="top"}

**`inst/dev`**

This folder contains development-related files and tools not needed in production.

:::

:::{layout="[30,70]" layout-valign="top"}

**`inst/img`**

This folder contains static image files for the application. To add images to the application, `R/zzz.R` contains `.onLoad()`, a wrapper for `system.file()` and Shiny's [`addResourcePath()`](https://shiny.rstudio.com/reference/shiny/1.0.1/addresourcepath).

:::

:::{layout="[30,70]" layout-valign="top"}

**`inst/run`**

The `inst/run/app.R` contains calls to `leprechaun::build()` and `pkgload::load_all()` before running the app with `run()`.[^run-app]

[^run-app]: `inst/run/app.R` is not run directly. The `leprechaun::add_app_file()` will create an `app.R` file for your app-package.

:::


#### Utilities 

:::{layout="[30,70]" layout-valign="top"}

**`R/leprechaun-utils.R`**

`leprechaun-utils.R` initially contains the `make_send_message()` function (which is used in the `R/server.R` above).

:::


:::{layout="[30,70]" layout-valign="top"}

**`R/input-handlers.R`**

- `leprechaun_handler_df()` and `leprechaun_handler_list()` are used for *"converting the input received from the WebSocket to a data.frame/list."*

    - `.onAttach()` registers the two input handlers above 

    -   [`registerInputHandler()`](https://shiny.posit.co/r/reference/shiny/0.11/registerinputhandler): *"When called, Shiny will use the function provided to refine the data passed back from the client (after being deserialized by `jsonlite`) before making it available in the input variable of the `server.R` file"*)
    
:::

:::{layout="[30,70]" layout-valign="top"}

**`R/_disable_autoload.R`**

`_disable_autoload.R` disables Shiny's  [`loadSupport()`](https://shiny.posit.co/r/reference/shiny/1.7.1/loadsupport). By default, Shiny will load *"any top-level supporting `.R` files in the `R/` directory adjacent to the `app.R`/`server.R`/`ui.R` files."*

:::

Expand the code chunks below to view the functions in `R/leprechaun-utils.R` and `R/input-handlers.R`.

```{r}
#| eval: false 
#| code-fold: true 
#| code-summary: 'show/hide make_send_message()'
#' Create a Helper to Send Messages
#'
#' Create a function to send custom messages to the front-end,
#' this function makes it such that the namespace is carried
#' along.
#' The namespace is appended as `ns`.
#' The namespace with the optional hyphen is
#' included as `ns2`.
#'
#' @param session Shiny session to derive namespace
#' @param prefix A prefix to add to all types.
#' Note that the prefix is followed by a hyphen `-`.
#'
#' @examples
#' \dontrun{
#' send_message <- make_send_message(session)
#' send_message("do-sth")
#' send_message("do-sth-else", x = 1)
#'
#' # with prefix
#' send_message <- make_send_message(session, prefix = "PREFIX")
#'
#' # this sends a mesasge of type:
#' # PREFIX-so-th
#' send_message("do-sth")
#' }
#'
#' @noRd
#' @keywords internal
make_send_message <- function(session, prefix = NULL) {
  ns <- session$ns(NULL)

  ns2 <- ns
  if (length(ns) > 0 && ns != "") {
    ns2 <- paste0(ns2, "-")
  }

  function(msgId, ...) {
    if (!is.null(prefix)) {
      msgId <- sprintf("%s-%s", prefix, msgId)
    }

    session$sendCustomMessage(
      msgId,
      list(
        ns = ns,
        ns2 = ns2,
        ...
      )
    )
  }
}
```

```{r}
#| eval: false 
#| code-fold: true 
#| code-summary: 'show/hide leprechaun_handler_df()'
#' Input Dataframe
#' 
#' Converts the input received from the WebSocket
#' to a data.frame.
#' 
#' @param data Input data received from WebSocket.
#' 
#' @keywords internal
leprechaun_handler_df <- function(data){
	do.call("rbind", lapply(data))
}
```

```{r}
#| eval: false 
#| code-fold: true 
#| code-summary: 'show/hide leprechaun_handler_list()'
#' Input List
#' 
#' Forces the input received from the WebSocket 
#' to a list. This should really not be needed as
#' it is handled like so by default.
#' 
#' @param data Input data received from WebSocket.
#' 
#' @keywords internal
leprechaun_handler_list <- function(data){
	return(data)
}
```

```{r}
#| eval: false 
#| code-fold: true 
#| code-summary: 'show/hide .onAttach()'
.onAttach <- function(...) {
	shiny::registerInputHandler(
		"lap.list", 
		leprechaun_handler_list, 
		force = TRUE
	)

	shiny::registerInputHandler(
		"lap.df", 
		leprechaun_handler_df, 
		force = TRUE
	)
}
```

#### [Application code recap]{style="font-weight: bold; font-size: 1.02em;"}

:::{layout="[30,70]" layout-valign="top"}

**UI & Server**

The UI and server functions in `R/ui.R` and `R/server`.R are the entry points of the `leprechaun` app, serving as wrappers that connect the app’s modules and centralize the UI layout and server logic (similar to `golem` apps).


:::


:::{layout="[30,70]" layout-valign="top"}

**Utility functions**

`leprechaun-utils.R` contains utilities that help with communication between your R server and JavaScript front-end, and `R/input-handlers.R` sets up custom data handling between your JavaScript front-end and R back-end. 

:::


:::{layout="[30,70]" layout-valign="top"}

**Assets**

The functions in `R/assets.R` are called with the `assets()` function in `R/ui.R`, which calls `serveAssets()` and includes all the front-end resources in our app. The `inst/assets/` folder will contain any custom JavaScript or CSS files (or SCSS/SASS files) for styling.

:::

:::{layout="[30,70]" layout-valign="top"}

**External resources**

The `inst/img/` folder will store images, which are loaded in the `.onLoad()` function in `R/zzz.R` file. 

:::


### [Writing code]{style="font-weight: bold; font-size: 1.02em;"}

Building `leprechaun` apps is similar to developing an R package. leprechaun has helper functions for adding modules[^add-module] and configuration[^add-config] files, but with fewer bells and whistles than `golem`. 


[^add-module]: Add a module with [`leprechaun::add_module()`](https://leprechaun.opifex.org/#/reference/add_module).

[^add-config]: Add a configuration file with [`leprechaun::use_config(quiet = FALSE)`](https://leprechaun.opifex.org/#/reference/use_config).


#### Modules 

leprechaun has an [`add_module()`](https://leprechaun.opifex.org/#/reference/add_module) helper function for creating modules. We'll use it to add the two inputs and scatter display modules.

`module_scatter_display` collects the data from `module_vars` and `module_aes` to create the plot with the custom `scatter_plot()` function:

-   To create the initial `var_input` module we'll run:

    ```{r}
    #| label: add_module-ui
    #| code-fold: false
    leprechaun::add_module("vars")
    ```
    
    -   This creates `R/module_vars.R` with functions for the UI and server portions of the Shiny module:
    
    ```{r}
    #| label: ui-var_input-module
    #| code-fold: false
    #' vars UI
    #' 
    #' @param id Unique id for module instance.
    #' 
    #' @keywords internal
    varsUI <- function(id){
    	ns <- NS(id)
    
    	tagList(
    		h2("var_input")
    	)
    }
    
    #' vars Server
    #' 
    #' @param id Unique id for module instance.
    #' 
    #' @keywords internal
    vars_server <- function(id){
    	moduleServer(
    		id,
    		function(
    			input, 
    			output, 
    			session
    			){
    				
    				ns <- session$ns
    				send_message <- make_send_message(session)
    
    				# your code here
    		}
    	)
    }
    
    # UI
    # var_inputUI('id')
    
    # server
    # var_input_server('id')

    ```
    
Note the `send_message <- make_send_message(session)` in `var_input_server()`. We'll cover how this is used in the JavaScript section below.

```{r}
#| label: co_box_use_package_doc
#| eval: true 
#| results: asis
#| echo: false
co_box(color = "g",
  header = "Tip: Using `@keywords internal`",
  contents = "

**`{pkgname}-package.R`**

The `leprechaun` module contents are similar to the modules created with the `golem` helper function, but instead of using the `@noRd` tag, `leprechaun` modules include `@keywords internal`, which can be used in combination with a `{pkgname}-package.R` file to [document your package](https://roxygen2.r-lib.org/articles/rd-other.html?q=@keywords#packages).

1. Call `usethis::use_package_doc()` 
2. Add the following to `{pkgname}-package.R`:

\`\`\`r
#' @keywords internal 
\"_PACKAGE\"
\`\`\`

")
```

The code for the `vars`, `aes` and `scatter_display` modules are below.

```{r}
#| eval: false
#| code-fold: true 
#| code-summary: 'show/hide module_vars.R'
#' vars UI
#'
#' @param id Unique id for module instance.
#'
#' @keywords internal
varsUI <- function(id){
	ns <- NS(id)
    tagList(
        selectInput(
          inputId = ns("y"),
          label = "Y-axis:",
          choices = c(
            "IMDB rating" = "imdb_rating",
            "IMDB number of votes" = "imdb_num_votes",
            "Critics Score" = "critics_score",
            "Audience Score" = "audience_score",
            "Runtime" = "runtime"
          ),
          selected = "audience_score"
        ),
        selectInput(
          inputId = ns("x"),
          label = "X-axis:",
          choices = c(
            "IMDB rating" = "imdb_rating",
            "IMDB number of votes" = "imdb_num_votes",
            "Critics Score" = "critics_score",
            "Audience Score" = "audience_score",
            "Runtime" = "runtime"
          ),
          selected = "imdb_rating"
        ),
        selectInput(
          inputId = ns("z"),
          label = "Color by:",
          choices = c(
            "Title Type" = "title_type",
            "Genre" = "genre",
            "MPAA Rating" = "mpaa_rating",
            "Critics Rating" = "critics_rating",
            "Audience Rating" = "audience_rating"
          ),
          selected = "mpaa_rating"
        )
      )
}

#' vars Server
#'
#' @param id Unique id for module instance.
#'
#' @keywords internal
vars_server <- function(id){
	moduleServer(
		id,
		function(
			input,
			output,
			session
			){

				ns <- session$ns
				send_message <- make_send_message(session)

      return(
        reactive({
          list(
            "y" = input$y,
            "x" = input$x,
            "z" = input$z
          )
        })
      )
		}
	)
}

# UI
# varsUI('id')

# server
# vars_server('id')

```

```{r}
#| eval: false
#| code-fold: true 
#| code-summary: 'show/hide module_aes.R'
#' aes UI
#'
#' @param id Unique id for module instance.
#'
#' @keywords internal
aesUI <- function(id){
	ns <- NS(id)
	tagList(
    sliderInput(
      inputId = ns("alpha"),
      label = "Alpha:",
      min = 0,
      max = 1,
      step = 0.1,
      value = 0.7
    ),
    sliderInput(
      inputId = ns("size"),
      label = "Size:",
      min = 0,
      max = 5,
      step = 0.5,
      value = 3
    ),
    textInput(
      inputId = ns("plot_title"),
      label = "Plot title",
      placeholder = "Enter plot title"
    )
	)
}

#' aes Server
#'
#' @param id Unique id for module instance.
#'
#' @keywords internal
aes_server <- function(id){
	moduleServer(
		id,
		function(
			input,
			output,
			session
			){

				ns <- session$ns
				send_message <- make_send_message(session)

      return(
        reactive({
          list(
            "alpha" = input$alpha,
            "size" = input$size,
            "plot_title" = input$plot_title
          )
        })
      )
		}
	)
}

# UI
# aesUI('id')

# server
# aes_server('id')

```

```{r}
#| eval: false
#| code-fold: true 
#| code-summary: 'show/hide module_scatter_display.R'
#' scatter_display UI
#'
#' @param id Unique id for module instance.
#'
#' @keywords internal
scatter_displayUI <- function(id){
	ns <- NS(id)
  tagList(
    tags$br(),
    plotOutput(outputId = ns("scatterplot"))
  )
}

#' scatter_display Server
#'
#' @param id Unique id for module instance.
#' @param var_inputs variable inputs
#' @param aes_inputs aesthetic inputs
#'
#' @keywords internal
scatter_display_server <- function(id, var_inputs, aes_inputs){
	moduleServer(
		id,
		function(
			input,
			output,
			session
			){

				ns <- session$ns
				send_message <- make_send_message(session)

    inputs <- reactive({
      plot_title <- tools::toTitleCase(aes_inputs()$plot_title)
        list(
          x = var_inputs()$x,
          y = var_inputs()$y,
          z = var_inputs()$z,
          alpha = aes_inputs()$alpha,
          size = aes_inputs()$size,
          plot_title = plot_title

        )
    })

    output$scatterplot <- renderPlot({
      plot <- scatter_plot(
        # data --------------------
        df = movies,
        x_var = inputs()$x,
        y_var = inputs()$y,
        col_var = inputs()$z,
        alpha_var = inputs()$alpha,
        size_var = inputs()$size
      )
      plot +
        ggplot2::labs(
          title = inputs()$plot_title,
            x = stringr::str_replace_all(tools::toTitleCase(inputs()$x), "_", " "),
            y = stringr::str_replace_all(tools::toTitleCase(inputs()$y), "_", " ")
        ) +
        ggplot2::theme_minimal() +
        ggplot2::theme(legend.position = "bottom")
    })
		}
	)
}

# UI
# scatter_displayUI('id')

# server
# scatter_display_server('id')

```

The other components of `lap` were created using the standard `usethis` package development functions.

#### Utility functions

```{r}
#| label: dev_box_g2r
#| eval: true 
#| results: asis
#| echo: false
dev_box(text = "Include update for https://g2r.opifex.org/ graphic!", TRUE, TRUE)
```

Use `usethis::use_r()` or create a new file in the `R/` folder to add utility functions to `lap`. Expand the code chunks below to view our plotting utility function and `bslib` theme:

```{r}
#| eval: false
#| code-fold: true 
#| code-summary: 'show/hide R/utils-scatter_plot.R'
#' The scatter plot utility function
#'
#' @description A custom graphing ggplot2 function
#'
#' @return The return value, if any, from executing the utility.
#'
#' @param df `data.frame` or `tibble`
#' @param x_var string variable mapped to `x` axis
#' @param y_var string variable mapped to `y` axis
#'
#'
#' @importFrom rlang .data
#'
#' @export
#'
scatter_plot <- function(df, x_var, y_var, col_var, alpha_var, size_var) {
    ggplot2::ggplot(data = df,
      ggplot2::aes(x = .data[[x_var]],
          y = .data[[y_var]],
          color = .data[[col_var]])) +
      ggplot2::geom_point(alpha = alpha_var, size = size_var)
}

```

```{r}
#| eval: false
#| code-fold: true 
#| code-summary: 'show/hide R/lap_theme.R'
#' thematic leprechaun theme
#'
#' @returns bslib theme
#'
#' @export
#'
lap_theme <- bslib::bs_theme(
  bg = "#ffffff",
  fg = "#1a1a1a",
  primary = "#3C9D5D",   # green primary
  secondary = "#CCCCCC",
  success = "#3C9D5D",
  info = "#17A2B8",
  warning = "#F0AD4E",
  danger = "#D9534F",
  accent = "#6C757D",
  base_font = bslib::font_google("Ubuntu"),
  heading_font = bslib::font_google("Raleway")
)

```


After creating the modules and utility function, adding these to the UI (`R/ui.R`) and server (`R/server.R`) is straightforward.

#### UI 

The `R/ui.R` file will contain a `navbarPage()` layout by default, but we'll update this with [`bslib`](https://rstudio.github.io/bslib/).

```{r}
#| eval: false 
#| code-fold: show 
#| code-summary: 'show/hide R/ui.R'
#' Shiny UI
#'
#' Core UI of package.
#'
#' @param req The request object.
#'
#' @import shiny
#' @importFrom bslib bs_theme
#'
#' @keywords internal
ui <- function(req){
  tagList(
      bslib::page_fillable(
        list(assets()),
        title = "Movie Reviews (lap)",
        theme = lap_theme,
        bslib::layout_sidebar(
          sidebar = bslib::sidebar(
            varsUI("vars"),
            aesUI("aes")
          ),
          bslib::card(
            full_screen = TRUE,
            bslib::card_body(
              scatter_displayUI("plot")
            )
          )
        )
      )
  )
}
```

#### Server

The `R/server.R` file contains the three module server functions. 

```{r}
#| eval: false 
#| code-fold: show 
#| code-summary: 'show/hide R/server.R'
#' Server
#'
#' Core server function.
#'
#' @param input,output Input and output list objects
#' containing said registered inputs and outputs.
#' @param session Shiny session.
#'
#' @noRd
#' @keywords internal
server <- function(input, output, session){
	send_message <- make_send_message(session)

      selected_vars <- vars_server("vars")

      selected_aes <- aes_server("aes")

      scatter_display_server("plot",
                             var_inputs = selected_vars,
                             aes_inputs = selected_aes)
}
```

By default, the `R/server.R` file contains the `make_send_message()` function (which will be demonstrated below).[^no-export-server]

[^no-export-server]: Note the `R/server.R` function is not exported from the package by default (i.e., the `@noRd` tag is included with `@keywords internal`).

After loading, documenting, and installing `lap`, we can launch the application with `run()`:

![`lap` with modules and utility functions](img/lap_app_v0.png){width='100%' fig-align='center'}

#### Adding images

To add an image to the UI, we save the file (`leprechaun-logo.png`) in the `inst/` folder:

:::{layout="[50,50]" layout-valign="top"}

**Save file to `inst/img/`**

```sh
inst/
  └── img/
       └── leprechaun-logo.png
```

:::

:::{layout="[50,50]" layout-valign="top"}
    
**Then add the `img/` path to the code to UI:**
    
```r
  bslib::card_header(
    tags$h4(tags$em("Brought to you by ",
        tags$img(
          src = "img/leprechaun-logo.png",
          height = 100,
          width = 100,
          style = "margin:10px 10px"
          )
        )
      )
    )
```

:::
    
Run `devtools::load_all()`, `devtools::document()`, and `devtools::install(upgrade = FALSE)`, then launch the application with `run()`:

![Adding images to `inst/img/`](img/leprechaun_img.png){width="100%" fig-align="center"}


#### Assets (JavaScript)

`leprechaun` combines `use_*` and `build` functions to add functionality to Shiny apps. The external code files are stored in the `inst/` folder. 

We'll briefly cover what this looks like with the [`packer`](https://packer.john-coene.com/#/) JavaScript example from the [package website](https://leprechaun.opifex.org/#/examples/basic#javascript). Be sure to install [`node`](https://packer.john-coene.com/#/guide/installation#node) and [`packer`](https://packer.john-coene.com/#/guide/installation#r-package).


Enter the following in the **Terminal**:

```{bash}
#| eval: false 
#| code-fold: false
brew update
brew install node
```

Install the R package: 

```{r}
#| eval: false 
#| code-fold: false
install.packages('packer')
# or 
pak::pak("JohnCoene/packer")
```


Build the `packer` scaffolding:[^packer-scaffold]

:::{layout="[30,70]" layout-valign="top"}

**[`packer::scaffold_leprechaun()`](https://packer.john-coene.com/#/references/scaffold_leprechaun)** 

```r
── Scaffolding leprechaun ──────────────────────────
✔ Initialiased npm
✔ webpack, webpack-cli, webpack-merge installed 
  with scope "dev" 
✔ Added npm scripts
✔ Created srcjs directory
✔ Created srcjs/config directory
✔ Created webpack config files

── Adding files to .gitignore and .Rbuildignore ──

✔ Setting active project to "/path/to/lap".
✔ Adding "^srcjs$" to .Rbuildignore.
✔ Adding "^node_modules$" to .Rbuildignore.
✔ Adding "^package\\.json$" to .Rbuildignore.
✔ Adding "^package-lock\\.json$" to .Rbuildignore.
✔ Adding "^webpack\\.dev\\.js$" to .Rbuildignore.
✔ Adding "^webpack\\.prod\\.js$" to .Rbuildignore.
✔ Adding "^webpack\\.common\\.js$" to .Rbuildignore.
✔ Adding "node_modules" to .gitignore.


── Scaffold built ──

ℹ Run `bundle` to build the JavaScript files
ℹ Run `leprechaun::use_packer()`
```

[^packer-scaffold]: [`packer::scaffold_leprechaun()`](https://packer.john-coene.com/#/references/scaffold_leprechaun) initializes the `npm` package manager for JavaScript, installs `webpack`, and adds the necessary JavaScript files and folders

:::

The following files and folders will be added to the lap root folder:

```{bash}
#| eval: false 
#| code-fold: true 
#| code-summary: 'show/hide node_modules/ files'
├── node_modules/
│   ├── @discoveryjs
│   ├── @jridgewell
│   ├── @types
│   ├── @webassemblyjs
│   ├── @webpack-cli
│   ├── @xtuc
│   ├── acorn
│   ├── acorn-import-assertions
│   ├── ajv
│   ├── ajv-keywords
│   ├── browserslist
│   ├── buffer-from
│   ├── caniuse-lite
│   ├── chrome-trace-event
│   ├── clone-deep
│   ├── colorette
│   ├── commander
│   ├── cross-spawn
│   ├── electron-to-chromium
│   ├── enhanced-resolve
│   ├── envinfo
│   ├── es-module-lexer
│   ├── escalade
│   ├── eslint-scope
│   ├── esrecurse
│   ├── estraverse
│   ├── events
│   ├── fast-deep-equal
│   ├── fast-json-stable-stringify
│   ├── fastest-levenshtein
│   ├── find-up
│   ├── flat
│   ├── function-bind
│   ├── glob-to-regexp
│   ├── graceful-fs
│   ├── has-flag
│   ├── hasown
│   ├── import-local
│   ├── interpret
│   ├── is-core-module
│   ├── is-plain-object
│   ├── isexe
│   ├── isobject
│   ├── jest-worker
│   ├── json-parse-even-better-errors
│   ├── json-schema-traverse
│   ├── kind-of
│   ├── loader-runner
│   ├── locate-path
│   ├── merge-stream
│   ├── mime-db
│   ├── mime-types
│   ├── neo-async
│   ├── node-releases
│   ├── p-limit
│   ├── p-locate
│   ├── p-try
│   ├── path-exists
│   ├── path-key
│   ├── path-parse
│   ├── picocolors
│   ├── pkg-dir
│   ├── punycode
│   ├── randombytes
│   ├── rechoir
│   ├── resolve
│   ├── resolve-cwd
│   ├── resolve-from
│   ├── safe-buffer
│   ├── schema-utils
│   ├── serialize-javascript
│   ├── shallow-clone
│   ├── shebang-command
│   ├── shebang-regex
│   ├── source-map
│   ├── source-map-support
│   ├── supports-color
│   ├── supports-preserve-symlinks-flag
│   ├── tapable
│   ├── terser
│   ├── terser-webpack-plugin
│   ├── undici-types
│   ├── update-browserslist-db
│   ├── uri-js
│   ├── watchpack
│   ├── webpack
│   ├── webpack-cli
│   ├── webpack-merge
│   ├── webpack-sources
│   ├── which
│   └── wildcard
├── package-lock.json
├── package.json
├── srcjs/
│   ├── config
│   ├── index.js
│   └── modules
├── webpack.common.js
├── webpack.dev.js
└── webpack.prod.js

106 directories, 36 files
```


Now that the `packer` scaffolding is in place, we can run `leprechaun::use_packer()`, which creates the `inst/dev/packer.R` and adds `packer` to the `DESCRIPTION`.

:::{layout="[50,50]" layout-valign="top"}

**`leprechaun::use_packer()`**

```{verbatim}
✔ Creating inst/dev/packer.R
✔ Adding 'packer' to Suggests in DESCRIPTION
! This requires `leprechaun::build()` or the
! `leprechaun::build_roclet`
```

:::


The `inst/dev/packer.R` file contains the following: 

```{r}
#| eval: false
#| code-fold: true
#| code-summary: 'show/hide inst/dev/packer.R'
#' Bundle for Prod
#' 
#' Bundles packer using packer.
packer_bundle <- function(){
	has_packer <- requireNamespace("packer", quietly = TRUE)

	if (!has_packer) {
		warning(
			"Requires `packer` package: `install.packages('packer')`\n", 
			"Skipping.",
			call. = FALSE
		)
		return()
	}

	packer::bundle()
}

packer_bundle()
```
    
The final step is to build or 'bundle' the JavaScript files.

:::{layout="[50,50]" layout-valign="top"}
    
```r
leprechaun::build()
```

```{verbatim}
✔ Running packer.R
✔ Bundled  
```

:::

`leprechaun::build()` runs the contents of `inst/dev/packer.R` to bundle the JavaScript code. 

> *"Do not call this function from within the app. It helps build things, not run them."* - [`build.md` guide](https://github.com/devOpifex/leprechaun/blob/1c8ef853d2fadc476926dd31424965fc19582d2f/docs/guide/build.md)

Lets review the new files that have been added to `lap`: 

:::{layout="[50,50]" layout-valign="top"}

In the `inst/dev/` folder, the `packer.R` file has been added, which calls `packer::bundle()`:
    
```{verbatim}
inst/dev/
      └── packer.R

1 directory, 1 file
```

:::

:::{layout="[50,50]" layout-valign="top"}

In the `srcjs/` folder, `index.js` and `modules/message.js` create the alert with `Shiny.addCustomMessageHandler`:   
    
```{verbatim}
srcjs/
    ├── config
    │   ├── entry_points.json
    │   ├── externals.json
    │   ├── loaders.json
    │   ├── misc.json
    │   └── output_path.json
    ├── index.js
    └── modules
        └── message.js
```

:::
    

:::{layout="[50,50]" layout-valign="top"}

Add the following to **`R/server.R`** 
    
```r
send_message <- make_send_message(session)
send_message("show-packer",
			  text = "a message from R/server.R")
```

:::

We can also include messages from modules. 

:::{layout="[50,50]" layout-valign="top"}

**`R/module_plot_display.R`**

```r
send_message <- make_send_message(session)
send_message("show-packer",
  text = "a message from R/module_plot_display.R")
```

:::

After running `devtools::load_all()` and `devtools::document()`, the application loads with an alert. 

![JavaScript alert](img/positron_js_alert.png){width='100%' fig-align='center'}

```{r}
#| label: co_box_alert
#| eval: true 
#| results: asis
#| echo: false
co_box(color = "b", 
  size = "1.10",  
  hsize = "1.15", 
  look = "default",
  fold = FALSE, 
  header = "JS Alerts in Positron",
  contents = "If you're using Positron ![](img/positron.png){height=30}, you'll have to display the application in the browser to view the alert.")
```

Read more about sending JavaScript messages [here on the shiny website.](https://shiny.rstudio.com/articles/js-send-message.html)

#### Assets (Sass)

We can add Sass styling to our `leprechaun` app using the [`use_sass()`](https://leprechaun.opifex.org/#/reference/use_sass) helper function.[^sass-example] 

[^sass-example]: This Sass example is from the [package  website](https://leprechaun.opifex.org/#/examples/basic#sass).

:::{layout="[50,50]" layout-valign="top"}

**`leprechaun::use_sass()`**

```{verbatim}
✔ Creating scss
✔ Creating inst/dev/sass.R
✔ Adding 'sass' to Suggests in DESCRIPTION
✔ Adding "^scss$" to .Rbuildignore.
! This requires `leprechaun::build()` or the 
! `leprechaun::build_roclet`
```

:::
  
:::{layout="[50,50]" layout-valign="top"}
    
New files in `scss/`:
    
```{verbatim}
scss
├── _core.scss
└── main.scss

1 directory, 2 files
```

:::
    
The `scss/` folder created by  [`leprechaun::use_sass()`](https://leprechaun.opifex.org/#/reference/use_sass) includes `_core.scss` and `main.scss`.  We'll change the original `.error` in `_core.scss` from `red` to green level-four-headers (`h4`) using `$accent: #38B44A;`:
 
:::{layout="[50,50]" layout-valign="top"}
    
```scss
/* original file */
html{
	.error {
		color: red
	}
}
```
    
```scss
/* updated file */
$accent: #38B44A;

html{
    h4 {
        color: $accent;
    }
}
```

:::

Then run [`leprechaun::build()`](https://leprechaun.opifex.org/#/reference/build) to bunlde the SCSS files.

:::{layout="[50,50]" layout-valign="top"}

**`leprechaun::build()`**

    
```{verbatim}
✔ Running packer.R
✔ Bundled       
✔ Running sass.R
```

:::

The `inst/dev/sass.R` file contains a `sass_build()` function. `sass_build()` looks in the `scss/` folder for `main.scss` and creates the `inst/assets/style.min.css` file:

```{r}
#| label: sass_build-leprechaun
#| code-fold: false
#' Build CSS
#' 
#' Build the sass
sass_build <- function(){
	has_sass <- requireNamespace("sass", quietly = TRUE)

	if(!has_sass){
		warning(
			"Requires `sass` package: `install.packages('sass')`\n", 
			"Skipping.",
			call. = FALSE
		)
		return()
	}

	output <- sass::sass(
		sass::sass_file(
			'scss/main.scss'
		),
		cache = NULL,
		options = sass::sass_options(
			output_style='compressed'
		),
		output = 'inst/assets/style.min.css'
	)
	invisible(output)
}

sass_build()
```
    
Once again, I run `devtools::load_all()`, `devtools::document()`, and `devtools::install()`, then `run()`:

![Updates to `h4()` in `lap`](img/positron_scss_change.png){width='100%' fig-align='center'}

The `assets/` folder contains the files generated by the `.R` scripts in the `dev/` folder.

:::{layout="[50,50]" layout-valign="top"}

**`inst/assets/`**

```{verbatim}
inst/assets/
    ├── index.js
    └── style.min.css

1 directory, 2 files
```

:::


:::{layout="[50,50]" layout-valign="top"}

**`inst/dev/`**
    
```{verbatim}
inst/dev
    ├── packer.R
    └── sass.R

1 directory, 2 files
```

:::

`inst/dev/sass.R` creates `inst/assets/style.min.css` and `inst/dev/packer.R` creates `inst/assets/index.js`. 

After running `leprechaun::use_sass()` and `leprechaun::build()`, we'll check the `serveAssets()` function:

```{r}
#| label: serveAssets-scss-leprechaun
#| code-fold: false
lap:::serveAssets()
```

```{verbatim}
[[1]]
List of 10
 $ name      : chr "lap"
 $ version   : chr "0.0.0.9000"
 $ src       :List of 1
  ..$ file: chr "."
 $ meta      : NULL
 $ script    : Named chr "assets/index.js"
  ..- attr(*, "names")= chr "file"
 $ stylesheet: Named chr "assets/style.min.css"
  ..- attr(*, "names")= chr "file"
 $ head      : NULL
 $ attachment: NULL
 $ package   : chr "lap"
 $ all_files : logi TRUE
 - attr(*, "class")= chr "html_dependency"
```

The output shows that `stylesheet` has been updated with `"assets/style.min.css"` and `script` has been updated with `"assets/index.js"` (these files are loaded into the application when it runs). 



#### [Writing code recap]{style="font-weight: bold; font-size: 1.02em;"}

`leprechaun` app-packages have a flexible and lightweight structure, and they are less opinionated than `golem`.   

:::{layout="[30,70]" layout-valign="top"}

**Adding modules**

The `add_module()` function can be used to create new module files. The naming convention is less standardized than `golem`s helper function, but the functionality is the same.

:::

:::{layout="[30,70]" layout-valign="top"}

**Adding utility functions**

`leprechaun` comes with utilities (`_utils`) helpers  ([`use_html_utils()`](https://leprechaun.opifex.org/#/reference/use_html_utils), [`use_endpoints_utils()`](https://leprechaun.opifex.org/#/reference/use_endpoints_utils), [`use_js_utils()`](https://leprechaun.opifex.org/#/reference/use_js_utils)), and additional functions can be created using the `usethis` package. 

:::

:::{layout="[30,70]" layout-valign="top"}

**Adding non-R files**

Non-R files (JavaScript, SCSS, etc.) are included in the respective `inst/assets/` folder, which an accompanying helper function in `inst/dev`. 

:::

### Data

After calling `usethis::use_data_raw('movies')`, I can use `system.file()` to locate the `movies.RData` file with the following code in `data-raw/movies.R`:

```{r}
#| eval: false 
#| code-fold: false
## code to prepare `movies` dataset goes here
pth <- system.file('extdata/movies.RData', package = 'lap')
load(pth)
usethis::use_data(movies, overwrite = TRUE)
```

### Launch

Include the call to [`thematic::thematic_shiny()`](https://rstudio.github.io/thematic/articles/auto.html) in the `R/run.R` file (above the call to `shinyApp()`).

```{r}
#| eval: false 
#| code-fold: false
run <- function(...){
  thematic::thematic_shiny()
	shinyApp(
		ui = ui,
		server = server,
		...
	)
}
```

To launch the application in `lap` with an `app.R` file, `leprechaun` has a `add_app_file()` function. This creates a file similar to `inst/run/app.R`:

```{r}
#| eval: false 
#| code-fold: false
# Launch the ShinyApp 
# do not remove to keep push deploy button
# from RStudio
pkgload::load_all(
	reset = TRUE,
	helpers = FALSE
)

run()

```

### Unit tests 

The unit tests for the utility function and the module server functions are in the `tests/testthat/` folder: 

```{r}
#| label: dev_box_unit_tests
#| eval: false 
#| results: asis
#| echo: false
dev_box(text = "Include unit tests from `golem` app")
```

```{verbatim}
tests
├── testthat
│   ├── helper.R
│   ├── test-module_aes.R
│   ├── test-module_scatter_display.R
│   ├── test-module_vars.R
│   └── test-utils_scatter_plot.R
└── testthat.R

2 directories, 6 files
```


`leprechaun` relies on the `testthat` framework for testing.[^includes-testserver] I've included the BDD functions (`describe()` and `it()`) to make each behavior and test clear.

[^includes-testserver]: `testthat` can be used for testing utility functions and module functions (as shown [here](https://mjfrigaard.github.io/shiny-app-pkgs/test_modules.html)).

### System tests 

System tests can also be included with [`shinytest2`](https://rstudio.github.io/shinytest2/) in `lap` similar to those in `golem`: 

```{r}
#| code-fold: false
#| eval: false
library(shinytest2)
test_that("{shinytest2} recording: leprechaun app", {
  app <- AppDriver$new(name = "lap-01", height = 800, width = 1173)
  app$set_inputs(`vars-y` = "imdb_num_votes")
  app$set_inputs(`vars-x` = "critics_score")
  app$set_inputs(`vars-z` = "genre")
  app$set_inputs(`aes-alpha` = 0.7)
  app$set_inputs(`aes-size` = 3)
  app$set_inputs(`aes-plot_title` = "New plot title")
  app$expect_values()
})
```

### Configure

`leprechaun` app configuration files use the [config](https://rstudio.github.io/config/articles/introduction.html) package (similar to `golem`). `leprechaun` doesn't assume I'll be using a `config.yml` file, but we can easily add one with [`leprechaun::use_config()`](https://leprechaun.opifex.org/#/guide/use#config).


:::{layout="[50,50]" layout-valign="top"}

**`leprechaun::use_config()`**

Adds `inst/config.yml` and `R/config.R` and includes `yaml` to the `Imports` field in our `DESCRIPTION`.

:::

:::{layout="[50,50]" layout-valign="top"}

**`inst/config.yml`**

Defaults to `production: true`, which can be read using `config_read()` in `R/config.R`.

:::


:::{layout="[50,50]" layout-valign="top"}

**`lap:::config_read()`**

```{verbatim}
$production
[1] TRUE
```

:::

Values can be added to `inst/config.yml` using the [config file format](https://rstudio.github.io/config/articles/config.html#configurations), then the `CONFIG_FILE` can be set as [an environmental variable](https://rstudio.github.io/config/articles/introduction.html#configurations)


## Dependencies 

Is our `leprechaun` app _'leaner and smaller'_ than a `golem` app? Well, `leprechaun` doesn't add itself as a dependency (i.e., no need to add `leprechaun` to the list of `Imports` in the `DESCRIPTION` or `NAMESPACE`).

For example, `lap` depends on `shiny`, but not `leprechaun`. 

```{r}
#| eval: true
#| code-fold: false 
#| collapse: true 
#| comment: "\n"
pak::local_dev_deps_explain(
  deps = "shiny", 
  root = "_apps/lap")
```

```{r}
#| eval: true
#| code-fold: false 
#| collapse: true 
#| comment: "\n"
pak::local_dev_deps_explain(
  deps = "leprechaun", 
  root = "_apps/lap")
```

However, adding functionality and features with `packer` and the `use_*` functions can add dependencies to your `leprechaun` app:  

```{r}
#| eval: true
#| code-fold: false 
#| collapse: true 
#| comment: "\n"
pak::local_dev_deps_explain(
  deps = "packer", 
  root = "_apps/lap")
```

```{r}
#| eval: true
#| code-fold: false 
#| collapse: true 
#| comment: "\n"
pak::local_dev_deps_explain(
  deps = "sass", 
  root = "_apps/lap")
```

The section titled, 'the `golem` in the room' on the [package website](https://leprechaun.opifex.org/#/#the-golem-in-the-room) is worth reading because it covers the differences between the two packages (and why you might choose one over the other)."


The final folder tree for `lap` (a `leprechaun` app-package) is below. 

```{verbatim}
├── DESCRIPTION
├── NAMESPACE
├── R/
│   ├── _disable_autoload.R
│   ├── assets.R
│   ├── config.R
│   ├── data.R
│   ├── input-handlers.R
│   ├── lap_theme.R
│   ├── leprechaun-utils.R
│   ├── module_aes.R
│   ├── module_scatter_display.R
│   ├── module_vars.R
│   ├── run.R
│   ├── server.R
│   ├── ui.R
│   ├── utils-scatter_plot.R
│   ├── utils-tests.R
│   └── zzz.R
├── README.Rmd
├── README.md
├── app.R
├── data/
│   └── movies.rda
├── data-raw/
│   └── movies.R
├── inst/ # <1>
│   ├── assets
│   ├── config.yml
│   ├── dev
│   ├── extdata
│   ├── img
│   └── run # <1>
├── lap.Rproj
├── node_modules/ # <2>
├── package-lock.json # <2>
├── package.json # <2>
├── srcjs/ # <2>
│   ├── config # <2>
│   ├── index.js # <2>
│   ├── leprechaun-utils.js # <2>
│   └── modules # <2>
├── webpack.common.js # <2>
├── webpack.dev.js # <2>
├── webpack.prod.js # <2>
├── scss/ # <3>
│   ├── _core.scss # <3>
│   └── main.scss # <3>
└── tests/
    ├── testthat
    └── testthat.R

109 directories, 63 files
```
1. `leprechaun` apps are packages, so the `inst/` folders are available to the application at runtime.
2. Files and folders created with `packer::scaffold_leprechaun()`   
3. Files and folders created with `leprechaun::use_sass()`    
    
The output from `system.file(".", package = "lap")` has been passed to `fs::dir_tree()` below:
    
```{bash}
#| eval: false
#| code-fold: false
├── DESCRIPTION
├── INDEX
├── Meta
│   ├── Rd.rds
│   ├── data.rds
│   ├── features.rds
│   ├── hsearch.rds
│   ├── links.rds
│   ├── nsInfo.rds
│   └── package.rds
├── NAMESPACE
├── R
│   ├── lap
│   ├── lap.rdb
│   └── lap.rdx
├── assets
│   ├── index.js
│   └── style.min.css
├── config.yml
├── data
│   ├── Rdata.rdb
│   ├── Rdata.rds
│   └── Rdata.rdx
├── dev
│   ├── packer.R
│   └── sass.R
├── extdata
│   └── movies.RData
├── help
│   ├── AnIndex
│   ├── aliases.rds
│   ├── lap.rdb
│   ├── lap.rdx
│   └── paths.rds
├── html
│   ├── 00Index.html
│   └── R.css
├── img
│   └── leprechaun-logo.png
└── run
    └── app.R
```

As we can see, none of the additional files and folders created with `leprechaun` are installed from the source code.

## Recap

`leprechaun` delivers on its promise to be a 'leaner and smaller' version of `golem.` 

-   Tailored for developers who want to use modern JavaScript, HTML, and CSS workflows.      
    -   Multiple `inst/` sub-folders makes adding assets to the application easier, and `leprechaun` has a long list of `use_*` functions for including Sass, CSS, HTML, and JavaScript.  
-   `leprechaun` doesn't offer much help with testing, although this can be done using [`testthat`](https://testthat.r-lib.org/) and [`shinytest2`](https://rstudio.github.io/shinytest2/) (just as we would with a standard R package), and `leprechaun` leaves many of the architectural decisions to the developer.   
    -   The [package website](https://leprechaun.opifex.org/#/) has examples for getting started and adding multiple resources, but unfortunately the function reference had limited documentation.    

Below is an overview of the features/functions in the `leprechaun` framework:

{{< include _leprechaun_features.qmd >}}




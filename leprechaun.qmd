---
title: "The `leprechaun` framework"
knitr:
  opts_chunk: 
    collapse: true
    comment: ""
    
execute:
  echo: true
  warning: false
  eval: false
---

```{r}
#| label: utils
#| eval: true 
#| echo: false 
#| include: false
source("_common.R")
```

[`leprechaun`](https://leprechaun.opifex.org/#/) apps are built much like standard R packages (with `devtools` and `usethis`), but they're designed with the intention of being a 'leaner and smaller' version of `golem`:[^view-lap]

> *"it generates code and does not make itself a dependency of the application you build; this means applications are leaner, and smaller"*

[^view-lap]: Download the code used to build the `leprechaun` app [here](https://github.com/mjfrigaard/sfw/raw/main/_apps/lap.tar.gz)

## Getting started

Create a `leprechaun` app just like you would a new R package:

```{r}
#| label: create_package-lap
#| code-fold: false
#| eval: false
usethis::create_package("lap")
```

```{bash}
#| label: create_package-lap-output
#| code-fold: false
✔ Creating '../projects/lap/'
✔ Setting active project to '/Users/mjfrigaard/projects/lap'
✔ Creating 'R/'
✔ Writing 'DESCRIPTION'
✔ Writing 'NAMESPACE'
✔ Writing 'lap.Rproj'
✔ Adding '^lap\\.Rproj$' to '.Rbuildignore'
✔ Adding '.Rproj.user' to '.gitignore'
✔ Adding '^\\.Rproj\\.user$' to '.Rbuildignore'
✔ Opening '/Users/mjfrigaard/projects/lap/' in new RStudio session
```

After the new project opens, install and load the `leprechaun` package, then run `leprechaun::scaffold()`:[^leprechaun-scaffold]

[^leprechaun-scaffold]: The [`leprechaun::scaffold()`](https://leprechaun.opifex.org/#/reference/scaffold) defaults to a `navbarPage()`, but I've switched to a `fluidPage()` for this example. 

```{r}
#| label: install.packages-scaffold
#| code-fold: false
install.packages("leprechaun")
library(leprechaun)
leprechaun::scaffold(ui = "fluidPage")
```


```{bash}
#| label: leprechaun-scaffold-output
#| code-fold: false
── Scaffolding leprechaun app ─────────────────────────────────────────

── Creating lock file ──

✔ Creating .leprechaun

── Adding dependencies ──

✔ Adding 'shiny' to Imports in DESCRIPTION
✔ Adding 'bslib' to Imports in DESCRIPTION
✔ Adding 'htmltools' to Imports in DESCRIPTION
✔ Adding 'pkgload' to Suggests in DESCRIPTION


── Generating code ──

✔ Creating R/ui.R
✔ Creating R/assets.R
✔ Creating R/run.R
✔ Creating R/server.R
✔ Creating R/leprechaun-utils.R
✔ Creating R/_disable_autoload.R
✔ Creating R/zzz.R
✔ Creating R/input-handlers.R

✔ Creating inst/dev
✔ Creating inst/assets
✔ Creating inst/img
✔ Creating inst/run/app.R

── Ignoring files ──

✔ Adding '^\\.leprechaun$' to '.Rbuildignore'
```

## Package files 

`leprechaun::scaffold()` results in the following folder tree:

```{bash}
#| code-fold: false
lap/
  ├── DESCRIPTION
  ├── NAMESPACE
  ├── R/
  │   ├── _disable_autoload.R
  │   ├── assets.R
  │   ├── input-handlers.R
  │   ├── leprechaun-utils.R
  │   ├── run.R
  │   ├── server.R
  │   ├── ui.R
  │   └── zzz.R
  ├── inst/
  │   ├── assets/
  │   ├── dev/
  │   ├── img/
  │   └── run/
  │       └── app.R
  └── lap.Rproj

7 directories, 12 files
```

The standard R package files and folders (`DESCRIPTION`, `NAMESPACE`, `R/`, and `lap.Rproj`) are accompanied by multiple sub-folders in `inst/` (recall that `inst/` contents are available in the package when the package is installed).

### `leprechaun` files

The initial application files are created using [`leprechaun::scaffold()`](https://leprechaun.opifex.org/#/reference/scaffold), which takes the following options as function arguments:

  -   `ui` controls the application layout (can be `"fluidPage"` or `"navbarPage"`, defaults to `"navbarPage"`)
  -   `bs_version` Bootstrap version ("*If shiny \> 1.6 is installed defaults to version 5, otherwise version 4"* )
  -   `overwrite`: Overwrite all files?\
    
```{bash}
#| code-fold: false
└── R/
    ├── _disable_autoload.R
    ├── assets.R
    ├── input-handlers.R
    ├── leprechaun-utils.R
    ├── run.R
    ├── server.R
    ├── ui.R
    └── zzz.R
```

-   `_disable_autoload.R` disables Shiny's  [`loadSupport()`](https://shiny.posit.co/r/reference/shiny/1.7.1/loadsupport). By default, Shiny will load *"any top-level supporting `.R` files in the `R/` directory adjacent to the `app.R`/`server.R`/`ui.R` files."*

-   `assets.R`: contains the `serveAssets()` function, which will identify the modules using CSS or JavaScript and create `dependencies`, a list of metadata on the app

-   `input-handlers.R`: contains `leprechaun_handler_df()` and `leprechaun_handler_list()` for *"converting the input received from the WebSocket to a data.frame/list"*

-   `.onAttach()` registers the two input handlers above 

    -   [`registerInputHandler()`](https://shiny.posit.co/r/reference/shiny/0.11/registerinputhandler): *"When called, Shiny will use the function provided to refine the data passed back from the client (after being deserialized by `jsonlite`) before making it available in the input variable of the `server.R` file"*)

-   `leprechaun-utils.R` initially contains the `make_send_message()` function (which is used in the `R/server.R` below)

### App Code 

-   `run.R` contains functions for running the production (`run()`) and development version of the application (`run_dev()`): 

-   `server.R` by default creates `send_message` with `make_send_message(session)` (see `R/leprechaun-utils.R` above).

-   `ui.R` holds the `ui()` and `assets()` functions. `assets()` loads the resources called in the `R/assets.R` file (see `serveAssets()` function above).

-   `zzz.R` contains `.onLoad()`, a wrapper for `system.file()` and Shiny's [`addResourcePath()`](https://shiny.rstudio.com/reference/shiny/1.0.1/addresourcepath) and function (used for adding images to the application in `inst/img/`).

#### The `inst/` folder

The `inst/` folder contains the initial `leprechaun` scaffolding folders:

```{bash}
#| eval: false
#| code-fold: false 
inst/
├── assets
├── dev
├── img
└── run
    └── app.R

4 directories, 1 file
```

`assets`, `dev`, and `img` will be demonstrated in the sections below. The `inst/run/app.R` contains calls to `leprechaun::build()` and `pkgload::load_all()` before running the app with `run()`

```{r}
#| eval: false
#| code-fold: false
# do not deploy from this file
# see leprechaun::add_app_file()
leprechaun::build()

pkgload::load_all(
	path = "../../",
	reset = TRUE,
	helpers = FALSE
)

run()
```
    
This file is not run directly (see the `leprechaun::add_app_file()` function for creating an `app.R` file to your app-package).

## Building `leprechaun` apps

Building `leprechaun` apps is similar to developing an R package. New code is placed in the `R/` folder, and application resources (CSS, SASS, JavaScript files) are added using one of the `leprechaun::use_*` functions: 

  -   [`use_sass()`](https://leprechaun.opifex.org/#/reference/use_sass) 
  -   [`use_html_utils()`](https://leprechaun.opifex.org/#/reference/use_html_utils)  
  -   [`use_endpoints_utils()`](https://leprechaun.opifex.org/#/reference/use_endpoints_utils)
  -   [`use_js_utils()`](https://leprechaun.opifex.org/#/reference/use_js_utils)
  
More assets can be added using the [`leprechaun::use_packer()`](https://leprechaun.opifex.org/#/examples/basic#javascript) function. 

### Modules 

leprechaun has an  [`add_module()`](https://leprechaun.opifex.org/#/reference/add_module) helper function for creating modules:

-   The initial `var_input` module:

    ```{r}
    #| label: add_module-ui
    #| code-fold: false
    leprechaun::add_module("var_input")
    ```
    
    -   This creates functions for the UI and server portions of the module.
    
    ```{r}
    #| label: ui-var_input-module
    #| code-fold: false
    #' var_input UI
    #' 
    #' @param id Unique id for module instance.
    #' 
    #' @keywords internal
    var_inputUI <- function(id){
    	ns <- NS(id)

    	tagList(
    		h2("var_input"),

    	)
    }
    ```

    -   The initial server module:
    
    ```{r}
    #| label: add_module-server
    #| code-fold: false
    #' var_input Server
    #' 
    #' @param id Unique id for module instance.
    #' 
    #' @keywords internal
    var_input_server <- function(id){
    	moduleServer(
    		id,
    		function(
    			input, 
    			output, 
    			session
    			){
    				
    				ns <- session$ns
    				send_message <- make_send_message(session)

    				# your code here
    		}
    	)
    }

    # UI
    # var_inputUI('id')

    # server
    # var_input_server('id')
    ```
    
Note the `send_message <- make_send_message(session)` in `var_input_server()`. We'll cover how this is used in the JavaScript section below.

```{r}
#| label: co_box_use_package_doc
#| eval: true 
#| results: asis
#| echo: false
co_box(color = "g",
  header = "Tip: `@keywords internal`",
  contents = "
The module contents are similar to `golem`, but instead of using the `@noRd` tag, these functions include `@keywords internal` (which can be used to [document your package](https://roxygen2.r-lib.org/articles/rd-other.html?q=@keywords#packages)).
")
```

The code for the `var_input` and `plot_display` modules are below. 

-  The `R/module_var_input.R` file: `plot_dispay` collects the data from `var_input` and creates the plot with the custom `scatter_plot()` function:

```{r}
#| eval: false
#| code-fold: false
var_inputUI <- function(id) {
  ns <- NS(id)
  tagList(
    selectInput(
      inputId = ns("y"),
      label = "Y-axis:",
      choices = c(
        "IMDB rating" = "imdb_rating",
        "IMDB number of votes" = "imdb_num_votes",
        "Critics Score" = "critics_score",
        "Audience Score" = "audience_score",
        "Runtime" = "runtime"
      ),
      selected = "audience_score"
    ),
    selectInput(
      inputId = ns("x"),
      label = "X-axis:",
      choices = c(
        "IMDB rating" = "imdb_rating",
        "IMDB number of votes" = "imdb_num_votes",
        "Critics Score" = "critics_score",
        "Audience Score" = "audience_score",
        "Runtime" = "runtime"
      ),
      selected = "imdb_rating"
    ),
    selectInput(
      inputId = ns("z"),
      label = "Color by:",
      choices = c(
        "Title Type" = "title_type",
        "Genre" = "genre",
        "MPAA Rating" = "mpaa_rating",
        "Critics Rating" = "critics_rating",
        "Audience Rating" = "audience_rating"
      ),
      selected = "mpaa_rating"
    ),
    sliderInput(
      inputId = ns("alpha"),
      label = "Alpha:",
      min = 0, max = 1, step = 0.1,
      value = 0.5
    ),
    sliderInput(
      inputId = ns("size"),
      label = "Size:",
      min = 0, max = 5,
      value = 2
    ),
    textInput(
      inputId = ns("plot_title"),
      label = "Plot title",
      placeholder = "Enter plot title"
    )
  )
}

var_input_server <- function(id) {
  moduleServer(id, function(input, output, session) {
      ns <- session$ns
      send_message <- make_send_message(session)

      # your code here
      return(
        reactive({
          list(
            "y" = input$y,
            "x" = input$x,
            "z" = input$z,
            "alpha" = input$alpha,
            "size" = input$size,
            "plot_title" = input$plot_title
          )
        })
      )
    }
  )
}
```

-  The `R/module_plot_display.R` file 

```{r}
#| eval: false
#| code-fold: false
plot_displayUI <- function(id) {
  ns <- NS(id)
  tagList(
    tags$br(),
    tags$blockquote(
      tags$em(
        tags$h6(
          "The code for this application comes from the ",
          tags$a("Building web applications with Shiny",
            href = "https://rstudio-education.github.io/shiny-course/"
          ),
          "tutorial"
        )
      )
    ),
    plotOutput(outputId = ns("scatterplot"))
  )
}
plot_display_server <- function(id, var_inputs) {
  moduleServer(id, function(input, output, session) {

      ns <- session$ns
      send_message <- make_send_message(session)

      inputs <- reactive({
        plot_title <- tools::toTitleCase(var_inputs()$plot_title)
        list(
          x = var_inputs()$x,
          y = var_inputs()$y,
          z = var_inputs()$z,
          alpha = var_inputs()$alpha,
          size = var_inputs()$size,
          plot_title = plot_title
        )
      })
      output$scatterplot <- renderPlot({
        plot <- scatter_plot(
          # data --------------------
          df = movies,
          x_var = inputs()$x,
          y_var = inputs()$y,
          col_var = inputs()$z,
          alpha_var = inputs()$alpha,
          size_var = inputs()$size
        )
        plot +
          ggplot2::labs(
            title = inputs()$plot_title,
            x = stringr::str_replace_all(
                  tools::toTitleCase(inputs()$x), "_", " "),
            y = stringr::str_replace_all(
                  tools::toTitleCase(inputs()$y), "_", " ")) +
          ggplot2::theme_minimal() +
          ggplot2::theme(legend.position = "bottom")
      })
    }
  )
}
```

After creating the modules, adding them to the UI (`R/ui.R`) and server (`R/server.R`) is straightforward.

-  The `R/ui.R` file: the UI includes the `bs_theme()` function (with version set to `5`).
    
```{r}
#| label: ui-leprechaun
#| code-fold: false
#' Shiny UI
#'
#' Core UI of package.
#'
#' @param req The request object.
#'
#' @import shiny
#' @importFrom bslib bs_theme
#'
#' @keywords internal
ui <- function(req) {
  fluidPage(
    theme = bs_theme(version = 5),
    assets(),
    h1("lap"),
    # Begin new code -->
    shiny::sidebarLayout(
      shiny::sidebarPanel(
        var_inputUI("vars")
      ),
      shiny::mainPanel(
        plot_displayUI("plot")
      )
    )
    ## End new code <--
  )
}
```

-  The `R/server.R` file: The server also has the `make_send_message()` function in it by default (more on that below).

```{r}
#| label: server-leprechaun
#| code-fold: false
#' Server
#'
#' Core server function.
#'
#' @param input,output Input and output list objects
#' containing said registered inputs and outputs.
#' @param session Shiny session.
#'
#' @noRd
#' @keywords internal
server <- function(input, output, session){

	send_message <- make_send_message(session)

  ## New code -->
   selected_vars <- var_input_server("vars")

   plot_display_server("plot", var_inputs = selected_vars)
   ## New code <--

}
```

The other components of `lap` were created using the standard `usethis` package development functions.

### Utility functions

-  `usethis::use_r()` created `R/utils_plot_display.R` to hold the `scatter_plot()` function  

```{r}
#| label: point-plot-leprechaun
#| code-fold: false
scatter_plot <- function(df, x_var, y_var, col_var, alpha_var, size_var) {
    ggplot2::ggplot(data = df,
      ggplot2::aes(x = .data[[x_var]],
          y = .data[[y_var]],
          color = .data[[col_var]])) +
      ggplot2::geom_point(alpha = alpha_var, size = size_var)

}
```

Now I can run `devtools::load_all()`, `devtools::document()`, restart and load the package, then `run()`

::: {#fig-full-run .column}

![](img/initial_lap_run.png){height="100%" width="100%" fig-align="center"}

run `lap`
:::

### Data

-  `movies.RData` was added to `inst/extdata` and loaded into the package with `usethis::use_data_raw()`

```{r}
#| label: co_box_extdata
#| eval: true 
#| results: asis
#| echo: false
co_box(color = "b",
  header = "Adding data to a package",
  contents = "After calling `usethis::use_data_raw('movies')`, I can use `system.file()` to locate the file with the following code in `data-raw/movies.R`:
  
\`\`\` r
## code to prepare `movies` dataset goes here
pth <- system.file('extdata/movies.RData', package = 'lap')
load(pth)
usethis::use_data(movies, overwrite = TRUE)
\`\`\`")
```

### Unit tests 

The unit tests for the `scatter_plot()` utility function and the module server functions are in the `tests/testthat/` folder: 

```{bash}
#| code-fold: false
#| eval: false
tests
├── testthat
│   ├── test-module_plot_display.R
│   ├── test-module_var_input.R
│   └── test-utils_scatter_plot.R
└── testthat.R

2 directories, 4 files
```

`leprechaun` relies on the `testthat` framework for testing.[^includes-testserver] I've included the BDD functions (`describe()` and `it()`) to make each behavior and test clear.

[^includes-testserver]: `testthat` can be used for testing utility functions and module functions (as shown [here](https://mjfrigaard.github.io/shiny-app-pkgs/test_modules.html)).

### System tests 

System tests can also be included with [`shinytest2`](https://rstudio.github.io/shinytest2/). The examples in `lap` are similar to those in the `golem` application. 

```{bash}
#| code-fold: false
#| eval: false
tests/
├── testthat/
│   ├── _snaps/
│   │   ├── app-feature-01
│   │   └── shinytest2
│   ├── setup-shinytest2.R
│   ├── test-app-feature-01.R
│   └── test-shinytest2.R
└── testthat.R

5 directories, 13 files
```

### Adding files and images

I'll demonstrate how to use the `inst/` folder by adding an image to the application.

-   Assume I want to add `leprechaun.jpg` to my UI. I start by adding the file to `inst/img/`:

    
    ```{bash}
    #| label: img-inst-leprechaun
    #| code-fold: false
    inst/
      └── img/
           └── leprechaun.jpg <- new image file!
    ```

-   Then I add the `img/` path to the code to UI: 
    
    ```{r}
    #| label: ui-img-inst
    #| code-fold: false
    tags$img(
      src = "img/leprechaun.jpg",
      height="25%",
      width="25%")
    ```
    
Once again, run `devtools::load_all()` and `devtools::document()`, restarting and loading the package, then run the application with `run()`

::: {#fig-leprechaun_img .column}
![](img/leprechaun_img.png){#fig-leprechaun_img width="100%" fig-align="center"}

Adding images to `inst/img/`
:::

### Adding resources 

`leprechaun` stores external code files the `inst/` folder (similar to the `golem` framework), but uses a combination of `use_*` and `build()` functions to add functionality to you app.  

#### Using `packer`

To demonstrate how [`packer`](https://packer.john-coene.com/#/) and `leprechaun` work together, we'll walk through the JavaScript example from the [package website](https://leprechaun.opifex.org/#/examples/basic#javascript) step-by-step:

-   First we have to build the scaffolding for `packer` by running [`packer::scaffold_leprechaun()`](https://packer.john-coene.com/#/references/scaffold_leprechaun):
    
    ```{r}
    #| label: scaffold_leprechaun
    #| code-fold: false
    packer::scaffold_leprechaun()
    ```

    -   [`packer::scaffold_leprechaun()`](https://packer.john-coene.com/#/references/scaffold_leprechaun) initializes the `npm` package manager for JavaScript, installs `webpack`, and adds the necessary JavaScript files and folders:

    ```{bash}
    #| code-fold: false
    ── Scaffolding leprechaun ──────────────────────────────────────
    ✔ Initialiased npm
    ✔ webpack, webpack-cli, webpack-merge installed with scope "dev" 
    ✔ Added npm scripts
    ✔ Created srcjs directory
    ✔ Created srcjs/config directory
    ✔ Created webpack config files
    
    ── Adding files to .gitignore and .Rbuildignore ──
    
    ✔ Setting active project to '/projects/apps/sfw/_apps/lap'
    ✔ Adding '^srcjs$' to '.Rbuildignore'
    ✔ Adding '^node_modules$' to '.Rbuildignore'
    ✔ Adding '^package\\.json$' to '.Rbuildignore'
    ✔ Adding '^package-lock\\.json$' to '.Rbuildignore'
    ✔ Adding '^webpack\\.dev\\.js$' to '.Rbuildignore'
    ✔ Adding '^webpack\\.prod\\.js$' to '.Rbuildignore'
    ✔ Adding '^webpack\\.common\\.js$' to '.Rbuildignore'
    ✔ Adding 'node_modules' to '.gitignore'
    
    ── Scaffold built ──
    
    ℹ Run `bundle` to build the JavaScript files
    ℹ Run `leprechaun::use_packer()`
    ```

    -  Now that the scaffolding is in place, run `leprechaun::use_packer()`:
    
    ```{r}
    #| label: use_packer
    #| code-fold: false
    leprechaun::use_packer()
    ```

    ```{bash}
    #| label: use_packer-output
    #| code-fold: false
    ✔ Creating inst/dev/packer.R
    ✔ Adding 'packer' to Suggests in DESCRIPTION
    ! This requires `leprechaun::build()` or the `leprechaun::build_roclet`
    ```
    
-   The final step is to build or 'bundle' the JavaScript files with `leprechaun::build()`
    
    ```{r}
    #| label: leprechaun_build_js
    #| code-fold: false
    leprechaun::build()
    ```

    ```{bash}
    #| label: leprechaun_build_js-output
    #| code-fold: false
    ✔ Running packer.R
    ✔ Bundled       
    ```
    
Lets review the new files that have been added to the `lap`: 

-   In the `inst/dev/` folder, the `packer.R` file has been added, which calls `packer::bundle()`
    
    ```{bash}
    #| label: packer-dev-tree
    #| code-fold: false
    inst/dev/
          └── packer.R
    
    1 directory, 1 file
    ```

-   In the `srcjs/` folder, the `modules/message.js` and `index.js` create the alert with `Shiny.addCustomMessageHandler` 
    
    ```{bash}
    #| label: packer-srcjs-tree
    #| code-fold: false
    srcjs/
        ├── config
        │   ├── entry_points.json
        │   ├── externals.json
        │   ├── loaders.json
        │   ├── misc.json
        │   └── output_path.json
        ├── index.js
        └── modules
            └── message.js
    ```
    
    ``` js
    // srcjs/modules/message.js
    export const message = (msg) => {
      alert(msg);
    }
    // srcjs/index.js
    import { message } from './modules/message.js';
    import 'shiny';
    
    // In shiny server use:
    // session$sendCustomMessage('show-packer', 'hello packer!')
    Shiny.addCustomMessageHandler('show-packer', (msg) => {
      message(msg.text);
    })
    ```

To use the JS message scripts in `srcjs/`, I add the following to `R/server.R`: 

-   In `R/server.R`
    
```{r}
#| label: send_message_server
#| code-fold: false
	send_message <- make_send_message(session)
	send_message("show-packer",
				  text = "this message is from your R/server.R file")
```

After running `devtools::load_all()` and `devtools::document()`, the application loads with an alert: 

::: {#fig-leprechaun_message .column}
![`send_message()` from `R/server.R`](img/leprechaun_message.png){#fig-leprechaun_message width="40%" fig-align="center"}

`send_message()`
:::

We can also include messages from modules. 

-   In `R/module_plot_display.R`

```{r}
#| label: send_message_module
#| code-fold: false
send_message <- make_send_message(session)
send_message("show-packer",
  text = "this is a message from your plot_display module")
```

Read more about sending JavaScript messages [here on the shiny website.](https://shiny.rstudio.com/articles/js-send-message.html)


#### Using `Sass`

We can add Sass styling to our `leprechaun` app using the [`use_sass()`](https://leprechaun.opifex.org/#/reference/use_sass) helper function (this Sass example is from the [package  website](https://leprechaun.opifex.org/#/examples/basic#sass)). 
  
-  Run `leprechaun::use_sass()`:

```{r}
#| label: use_sass-leprechaun
#| code-fold: false
leprechaun::use_sass()
```
    
-   This will add files to `assets/` and `dev/` and we see the following messages:  
  
```{bash}
#| label: use_sass-warning
#| code-fold: false
✔ Creating scss
✔ Creating inst/dev/sass.R
✔ Adding 'sass' to Suggests in DESCRIPTION
✔ Adding '^scss$' to '.Rbuildignore'
! This requires `leprechaun::build()` or the `leprechaun::build_roclet`
```
    
-   Below are the new files in `scss/`:
    
```{bash}
#| label: use_sass-dev
#| code-fold: false
scss
├── _core.scss
└── main.scss

1 directory, 2 files
```
    
The `scss/` folder created by  [`leprechaun::use_sass()`](https://leprechaun.opifex.org/#/reference/use_sass) includes `_core.scss` and `main.scss`.

-   `_core.scss`: the original file is below
    
```{scss}
html{
	.error {
		color: red
	}
}
```

-  We'll change the `color:` from `red` to green (`#38B44A`) using `$accent: #38B44A;`
    
```{scss}
$accent: #38B44A;

html{
    h1 {
        color: $accent;
    }
}
```

-  Then run [`leprechaun::build()`](https://leprechaun.opifex.org/#/reference/build)
    
```{r}
#| label: build-leprechaun
#| code-fold: false
leprechaun::build()
```
    
```{bash}
#| label: build-running-sass-leprechaun
#| code-fold: false
✔ Running packer.R
✔ Bundled       
✔ Running sass.R
```

-   The `inst/dev/sass.R` file contains a `sass_build()` function
  
    -   `sass_build()` looks in the `scss/` folder for `main.scss` and creates the `inst/assets/style.min.css` file.

    ```{r}
    #| label: sass_build-leprechaun
    #| code-fold: false
    #' Build CSS
    #'
    #' Build the sass
    sass_build <- function() {
      has_sass <- requireNamespace("sass", quietly = TRUE)
    
      if (!has_sass) {
        warning(
          "Requires `sass` package: `install.packages('sass')`\n",
          "Skipping.",
          call. = FALSE
        )
        return()
      }
    
      output <- sass::sass(
        sass::sass_file(
          "scss/main.scss"
        ),
        cache = NULL,
        options = sass::sass_options(
          output_style = "compressed"
        ),
        output = "inst/assets/style.min.css"
      )
      invisible(output)
    }
    
    sass_build()
    ```
    
Once again, I run `devtools::load_all()`, `devtools::document()`, install and restart, then load the package and `run()`

::: {#fig-leprechaun_css .column}
![](img/leprechaun_css.png){#fig-leprechaun_css width="100%" fig-align="center"}

run `lap` with new Sass
:::

### `leprechaun::build()`

The `assets/` folder contains the files generated by the `.R` scripts in the `dev/` folder.

> *"Do not call this function from within the app. It helps build things, not run them."* - [`build.md` guide](https://github.com/devOpifex/leprechaun/blob/1c8ef853d2fadc476926dd31424965fc19582d2f/docs/guide/build.md)

-   Contents of `inst/assets/`:
    
    ```{bash}
    inst/assets/
            ├── index.js
            └── style.min.css
    
    1 directory, 2 files
    ```

-   Contents of `inst/dev/`:
    
    ```{bash}
    inst/dev/
          ├── packer.R
          └── sass.R
    
    1 directory, 2 files
    ```

-   `inst/dev/sass.R` creates `inst/assets/style.min.css` and `inst/dev/packer.R` creates `inst/assets/index.js`

#### `serveAssets()`

After running `leprechaun::use_sass()` and `leprechaun::build()`, we'll check the `serveAssets()` function:

```{r}
#| label: serveAssets-scss-leprechaun
#| code-fold: false
lap:::serveAssets()
```

```{bash}
#| eval: false
#| code-fold: false
[[1]]
List of 10
 $ name      : chr "lap"
 $ version   : chr "0.0.0.9000"
 $ src       :List of 1
  ..$ file: chr "."
 $ meta      : NULL
 $ script    : Named chr "assets/index.js"
  ..- attr(*, "names")= chr "file"
 $ stylesheet: Named chr [1:2] "assets/style.min.css" "html/R.css"
  ..- attr(*, "names")= chr [1:2] "file" "file"
 $ head      : NULL
 $ attachment: NULL
 $ package   : chr "lap"
 $ all_files : logi TRUE
 - attr(*, "class")= chr "html_dependency"
```

This shows me `stylesheet` has been updated with `"assets/style.min.css"` and `script` has been updated with `"assets/index.js"` (these files are loaded into the application when it runs). 

### Configure

`leprechaun` app configuration files use the [config](https://rstudio.github.io/config/articles/introduction.html) package (similar to `golem`). `leprechaun` doesn't assume I'll be using a `config.yml` file, but I can easily add one with [`leprechaun::use_config()`](https://leprechaun.opifex.org/#/guide/use#config).

-   `use_config()` adds a `inst/config.yml` and `R/config.R`

-   The default value in the `config.yml` files is `production: true`, which can be read using `config_read()` in `R/config.R`.
    
    ```{r}
    #| label: config_read-leprechaun
    #| code-fold: false
    config_read()
    ```

    ```{bash}
    $production
    [1] TRUE
    ```

    -   Values can be added to `inst/config.yml` using the [config file format](https://biostat.app.vumc.org/wiki/Main/YamlR), then the `CONFIG_FILE` can be set as [an environmental variable](https://rstudio.github.io/config/articles/introduction.html#configurations)

## Dependencies 

```{r}
#| label: co_box_leaner_smaller
#| eval: true 
#| results: asis
#| echo: false
co_box(
  color = "b", fold = FALSE, look = 'minimal',
  header = "**What does _'leaner and smaller'_ mean?**", 
  contents = "

`leprechaun` doesn't add itself as a dependency (i.e., no need to add `leprechaun` to the list of `Imports` in the `DESCRIPTION` or `NAMESPACE`). 
  
The section titled, 'the `golem` in the room' on the [package website](https://leprechaun.opifex.org/#/#the-golem-in-the-room) is worth reading because it covers the differences between the two packages (and why you might choose one over the other).")
```

The final folder tree for `lap` (a `leprechaun` app-package) are below: 

```{bash}
#| eval: false
#| code-fold: false 
├── DESCRIPTION
├── NAMESPACE
├── R/
│   ├── _disable_autoload.R
│   ├── assets.R
│   ├── config.R
│   ├── endpoint-utils.R
│   ├── html-utils.R
│   ├── input-handlers.R
│   ├── leprechaun-utils.R
│   ├── module_plot_display.R
│   ├── module_var_input.R
│   ├── run.R
│   ├── server.R
│   ├── ui.R
│   ├── utils-js.R
│   ├── utils_scatter_plot.R
│   └── zzz.R
├── README.md
├── app.R
├── data/
│   └── movies.rda
├── data-raw/
│   └── movies.R
├── inst/
│   ├── assets
│   ├── config.yml
│   ├── dev
│   ├── extdata
│   ├── img
│   └── run
├── lap.Rproj
├── node_modules/ 
├── package-lock.json
├── package.json
├── scss/
│   ├── _core.scss
│   └── main.scss
├── srcjs/
│   ├── config
│   ├── index.js
│   ├── leprechaun-utils.js
│   └── modules
├── tests/
│   ├── testthat
│   └── testthat.R
├── webpack.common.js
├── webpack.dev.js
└── webpack.prod.js

109 directories, 63 files
```

The packer::

`lap` depends on `shiny`, but not `leprechaun`. 

```{r}
#| eval: true
#| code-fold: false 
#| collapse: true 
#| comment: "\n"
pak::local_dev_deps_explain(
  deps = "shiny", 
  root = "_apps/lap")
```

```{r}
#| eval: true
#| code-fold: false 
#| collapse: true 
#| comment: "\n"
pak::local_dev_deps_explain(
  deps = "leprechaun", 
  root = "_apps/lap")
```

However, adding functionality and features with the `use_*` functions can add dependencies to your `leprechaun` app:  

```{r}
#| eval: true
#| code-fold: false 
#| collapse: true 
#| comment: "\n"
pak::local_dev_deps_explain(
  deps = "sass", 
  root = "_apps/lap")
```

-   `leprechaun` apps are packages, so the `inst/` folders are available to the application at runtime (which I can find using `system.file()`).
    
    -   Below I've passed the output from `system.file(".", package = "lap")` to `fs::dir_tree()` to view it's contents:  
    
    
    ```{bash}
    #| label: system-file-leprechaun
    #| code-fold: false
    ├── DESCRIPTION
    ├── INDEX
    ├── Meta/
    │   ├── Rd.rds
    │   ├── data.rds
    │   ├── features.rds
    │   ├── hsearch.rds
    │   ├── links.rds
    │   ├── nsInfo.rds
    │   └── package.rds
    ├── NAMESPACE
    ├── R/
    │   ├── lap
    │   ├── lap.rdb
    │   └── lap.rdx
    ├── assets/
    │   ├── index.js
    │   └── style.min.css
    ├── data/
    │   ├── Rdata.rdb
    │   ├── Rdata.rds
    │   └── Rdata.rdx
    ├── dev/
    │   ├── packer.R
    │   └── sass.R
    ├── extdata/
    │   └── movies.RData
    ├── help/
    │   ├── AnIndex
    │   ├── aliases.rds
    │   ├── lap.rdb
    │   ├── lap.rdx
    │   └── paths.rds
    ├── html/
    │   ├── 00Index.html
    │   └── R.css
    ├── img/
    │   └── leprechaun.jpg
    └── run/
        └── app.R
    ```

    -   I can see the `inst/` folders and files I've created are available to `lap` at runtime

## Recap

`leprechaun` delivers on its promise to be a 'leaner and smaller' version of `golem.` 

Most of the features in `golem` are also accessible in `leprechaun`:

-    Adding modules: `leprechaun`'s `add_module()` function doesn't have the consistent naming or prefixes found in `golem::add_module()`, but still reduces a lot of typing if you are creating these files manually. 

-   Adding functions: leprechaun relies on `usethis::use_r()` for adding new functionality to your application

-   `leprechaun` doesn't come with any testing functions, although this can be done using [`testthat`](https://testthat.r-lib.org/) and [`shinytest2`](https://rstudio.github.io/shinytest2/) (just as we would with a standard R package).

Multiple `inst/` sub-folders makes adding assets to the application easier, and `leprechaun` has a long list of `use_*` functions for including Sass, CSS, HTML, and JavaScript. The package website has examples for getting started and adding multiple resources, but unfortunately the function reference had limited documentation. 

Below is an overview of the features/functions in the `leprechaun` framework:

{{< include _leprechaun_features.qmd >}}




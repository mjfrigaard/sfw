---
title: "Shiny frameworks"
format:
  html: 
    toc: true
    toc-depth: 5
    toc-location: right
    toc-title: Contents
    
  
knitr:
  opts_chunk: 
    collapse: true
    comment: "\t"
---

<!-- https://gist.github.com/jthomasmock/11acebd4448f171f786e01397df34116 -->

```{r}
#| label: setup 
#| warning: false 
#| message: false
#| echo: false 
#| include: false
options(repos = "http://cran.us.r-project.org")
```

```{r}
#| label: pak_setup
#| warning: false 
#| message: false
#| echo: false
# see if pak is on the names of the loaded namespaces
if (isFALSE("pak" %in% loadedNamespaces())) {
  install.packages("pak", quiet = TRUE)
} 
library(pak)
```

This website is a resource for Shiny developers to get an 'under the hood' view of three popular frameworks. 

## Golem

::: {layout="[20, 80]"}

![](img/goelm_hex.png){fig-align="left" width="250"}

[`gap`](golem.qmd): a [`golem`](https://thinkr-open.github.io/golem/) app-package


:::

[Download the `gap` source code](https://github.com/mjfrigaard/sfw/raw/main/_apps/gap.tar.gz).


## Leprechaun

::: {layout="[20, 80]"}

![](img/leprechaun_hex.png){fig-align="left" width="250"}



[`lap`](leprechaun.qmd): a [`leprechaun`](https://leprechaun.opifex.org/#/) app-package

:::

[Download the `lap` source code.](https://github.com/mjfrigaard/sfw/raw/main/_apps/lap.tar.gz).

<!--

::: {layout="[20, 80]"}

![](img/charpente.png){fig-align="left" width="250"}



[`cap`](charpente.qmd): a [`charpente`](https://rinterface.github.io/charpente/index.html) app-package ([download cap](https://github.com/mjfrigaard/sfw/raw/main/_apps/cap.tar.gz))

:::

-->

## Rhino

::: {layout="[20, 80]"}

![](img/rhino_hex.png){fig-align="left" width="250"}

 [`rap`](rhino.qmd): a [`rhino`](https://appsilon.github.io/rhino/) app (pseudo-package)[^rhino-non-pkg]
 
 [^rhino-non-pkg]: `rhino` apps aren't R packages--they're dependencies are managed with a `dependencies.R` file and [`box`](https://klmr.me/box/) modules.

:::

[Download the `rap` source code](https://github.com/mjfrigaard/sfw/raw/main/_apps/rap.tar.gz).

### Source application

The original data and code for each application comes from [Building Web Applications With Shiny](https://rstudio-education.github.io/shiny-course/),[^bwas] but has been adapted to provide a basic (but realistic) example with modules, utility function, tests, etc.

```{r}
#| eval: false
#| code-fold: false
library(shiny)
library(shinythemes)
ui <- fluidPage(
  theme = shinythemes::shinytheme("spacelab"),
  sidebarLayout(
    sidebarPanel(
      selectInput(
        inputId = "y",
        label = "Y-axis:",
        choices = c(
          "IMDB rating" = "imdb_rating",
          "IMDB number of votes" = "imdb_num_votes",
          "Critics Score" = "critics_score",
          "Audience Score" = "audience_score",
          "Runtime" = "runtime"
        ),
        selected = "audience_score"
      ),
      selectInput(
        inputId = "x",
        label = "X-axis:",
        choices = c(
          "IMDB rating" = "imdb_rating",
          "IMDB number of votes" = "imdb_num_votes",
          "Critics Score" = "critics_score",
          "Audience Score" = "audience_score",
          "Runtime" = "runtime"
        ),
        selected = "critics_score"
      ),
      selectInput(
        inputId = "z",
        label = "Color by:",
        choices = c(
          "Title Type" = "title_type",
          "Genre" = "genre",
          "MPAA Rating" = "mpaa_rating",
          "Critics Rating" = "critics_rating",
          "Audience Rating" = "audience_rating"
        ),
        selected = "mpaa_rating"
      ),
      sliderInput(
        inputId = "alpha",
        label = "Alpha:",
        min = 0, max = 1,
        value = 0.4
      ),
      sliderInput(
        inputId = "size",
        label = "Size:",
        min = 0, max = 5,
        value = 3
      ),
      textInput(
        inputId = "plot_title",
        label = "Plot title",
        placeholder = "Enter text to be used as plot title"
      ),
      actionButton(
        inputId = "update_plot_title",
        label = "Update plot title"
      )
    ),
    mainPanel(
      br(),
      p(
        "These data were obtained from",
        a("IMBD", href = "http://www.imbd.com/"), "and",
        a("Rotten Tomatoes", href = "https://www.rottentomatoes.com/"), "."
      ),
      p(
        "The data represent",
        nrow(movies),
        "randomly sampled movies released between 1972 to 2014 in the United States."
      ),
      plotOutput(outputId = "scatterplot"),
      hr(),
      p(em(
        "The code for this Shiny application comes from",
        a("Building Web Applications with shiny",
          href = "https://rstudio-education.github.io/shiny-course/"
        )
      ))
    )
  )
)

server <- function(input, output, session) {
  
  new_plot_title <- reactive({
    tools::toTitleCase(input$plot_title)
  }) |>
    bindEvent(input$update_plot_title,
      ignoreNULL = FALSE,
      ignoreInit = FALSE
    )


  output$scatterplot <- renderPlot({
    scatter_plot(
      # load movies data 
      df = movies,
      x_var = input$x,
      y_var = input$y,
      col_var = input$z,
      alpha_var = input$alpha,
      size_var = input$size
    ) +
      ggplot2::labs(title = new_plot_title()) +
      ggplot2::theme_minimal() +
      ggplot2::theme(legend.position = "bottom")
  })
}

shinyApp(ui = ui, server = server)
```

`scatter_plot()` gives us an example utility function to build with our applications.

```{r}
#| eval: false
#| code-fold: false
scatter_plot <- function(df, x_var, y_var, col_var, alpha_var, size_var) {
    ggplot2::ggplot(data = df,
      ggplot2::aes(x = .data[[x_var]],
          y = .data[[y_var]],
          color = .data[[col_var]])) +
      ggplot2::geom_point(alpha = alpha_var, size = size_var)

}
```

The application also uses an external dataset.[^movies-data] 

[^movies-data]: You can download the movies data [here.](https://github.com/mjfrigaard/sfw/raw/main/movies.RData)

[^bwas]: This was a popular course among colleagues and covers (in my opinion) what a developer should know before considering a framework.


```{r}
#| eval: true
#| echo: false
tar(tarfile = "_apps/gap.tar.gz",
  files = "_apps/gap",
  compression = 'gzip',
  tar = "tar")
tar(tarfile = "_apps/lap.tar.gz",
  files = "_apps/lap",
  compression = 'gzip',
  tar = "tar")
tar(tarfile = "_apps/rap.tar.gz",
  files = "_apps/rap",
  compression = 'gzip',
  tar = "tar")
```

